Hello - from /home/vlassis/.vscode/extensions/jaredly.reason-vscode-1.7.5/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","languageId":"ocaml","version":1,"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","languageId":"ocaml","version":1,"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\n\r\nlet frame_of_lltypes access_link par_lst locvar_lst = \r\n    let arr_of_lltypes = Array.of_list (access_link @ par_lst @ locvar_lst) in\r\n    struct_type context arr_of_lltypes\r\n\r\nlet give_lltype alan_type = exit 1\r\n    (* begin match alan_type with\r\n        | \r\n    end *)\r\n    \r\nlet rec codegen_func func_ast = \r\n    let ll_func_type = \r\n    define_function func_ast.func_id \r\n\r\n\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    -> \r\n            begin match er_op with\r\n                | Plus  -> build_add (codegen_expr er1) (codegen_expr er2) \"add\" builder\r\n                | Minus -> build_sub (codegen_expr er1) (codegen_expr er2) \"sub\" builder\r\n                | Mult  -> build_mul (codegen_expr er1) (codegen_expr er2) \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv (codegen_expr er1) (codegen_expr er2) \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv (codegen_expr er1) (codegen_expr er2) \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem (codegen_expr er1) (codegen_expr er2) \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem (codegen_expr er1) (codegen_expr er2) \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\nand codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 6, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","languageId":"ocaml","version":1,"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 9, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00286102294922ms
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":0,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0228881835938ms
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":0},"end":{"line":44,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":46,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":46,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":10},"end":{"line":43,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":9},"end":{"line":43,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.046968460083ms
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":2},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_rtype : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":3},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_retype : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 25, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":11},"end":{"line":43,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":4},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_rettype : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 27, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":12},"end":{"line":43,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":5},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 30, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":13},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 31, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":44,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":44,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 37, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":46,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":46,"character":29}}}
[server] Got a method textDocument/definition
[server] processing took 0.00786781311035ms
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":5},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":5}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":46,"character":29}}}
[server] Got a method textDocument/definition
[server] processing took 0.00596046447754ms
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":46,"character":29}}}
[server] Got a method textDocument/definition
[server] processing took 0.00905990600586ms
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":9},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00476837158203ms
Sending response {"id": 42, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":9},"end":{"line":43,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 45, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/references","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":13},"context":{"includeDeclaration":true}}}
[server] Got a method textDocument/references
[server] processing took 0.00190734863281ms
Sending response {"id": 47, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","languageId":"ocaml","version":1,"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\n\r\nlet frame_of_lltypes access_link par_lst locvar_lst = \r\n    let arr_of_lltypes = Array.of_list (access_link @ par_lst @ locvar_lst) in\r\n    struct_type context arr_of_lltypes\r\n\r\nlet give_lltype alan_type = exit 1\r\n    (* begin match alan_type with\r\n        | \r\n    end *)\r\n    \r\nlet rec codegen_func func_ast = \r\n    let ll_func_type = \r\n    define_function func_ast.func_id \r\n\r\n\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    -> \r\n            begin match er_op with\r\n                | Plus  -> build_add (codegen_expr er1) (codegen_expr er2) \"add\" builder\r\n                | Minus -> build_sub (codegen_expr er1) (codegen_expr er2) \"sub\" builder\r\n                | Mult  -> build_mul (codegen_expr er1) (codegen_expr er2) \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv (codegen_expr er1) (codegen_expr er2) \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv (codegen_expr er1) (codegen_expr er2) \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem (codegen_expr er1) (codegen_expr er2) \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem (codegen_expr er1) (codegen_expr er2) \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\nand codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00190734863281ms
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 50, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":9},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 53, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":41,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 58, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/references","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":13},"context":{"includeDeclaration":true}}}
[server] Got a method textDocument/references
[server] processing took 0.00405311584473ms
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 61, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 62, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":9},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 65, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":67}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 68, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 69, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 71, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":9},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 74, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Sending response {"id": 75, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","languageId":"ocaml","version":1,"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\n\r\nlet frame_of_lltypes access_link par_lst locvar_lst = \r\n    let arr_of_lltypes = Array.of_list (access_link @ par_lst @ locvar_lst) in\r\n    struct_type context arr_of_lltypes\r\n\r\nlet give_lltype alan_type = exit 1\r\n    (* begin match alan_type with\r\n        | \r\n    end *)\r\n    \r\nlet rec codegen_func func_ast = \r\n    let ll_func_type = \r\n    define_function func_ast.func_id \r\n\r\n\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    -> \r\n            begin match er_op with\r\n                | Plus  -> build_add (codegen_expr er1) (codegen_expr er2) \"add\" builder\r\n                | Minus -> build_sub (codegen_expr er1) (codegen_expr er2) \"sub\" builder\r\n                | Mult  -> build_mul (codegen_expr er1) (codegen_expr er2) \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv (codegen_expr er1) (codegen_expr er2) \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv (codegen_expr er1) (codegen_expr er2) \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem (codegen_expr er1) (codegen_expr er2) \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem (codegen_expr er1) (codegen_expr er2) \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\nand codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 77, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 78, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":9},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 80, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 81, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 84, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 85, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Error.ml","languageId":"ocaml","version":1,"text":"open Format\nopen Lexing\n\nexception Terminate\n\ntype verbose = Vquiet | Vnormal | Vverbose\n\nlet flagVerbose = ref Vnormal\n\nlet numErrors = ref 0\nlet maxErrors = ref 10\nlet flagWarnings = ref true\nlet numWarnings = ref 0\nlet maxWarnings = ref 200\n\ntype position =\n    PosPoint   of Lexing.position\n  | PosContext of Lexing.position * Lexing.position\n  | PosDummy\n\nlet position_point lpos = PosPoint lpos\nlet position_context lpos_start lpos_end = PosContext (lpos_start, lpos_end)\nlet position_dummy = PosDummy\n\nlet print_position ppf pos =\n  match pos with\n  | PosPoint lpos ->\n      fprintf ppf \"@[file \\\"%s\\\",@ line %d,@ character %d:@]@ \"\n        lpos.pos_fname lpos.pos_lnum (lpos.pos_cnum - lpos.pos_bol)\n  | PosContext (lpos_start, lpos_end) ->\n      if lpos_start.pos_fname != lpos_end.pos_fname then\n        fprintf ppf \"@[file \\\"%s\\\",@ line %d,@ character %d to@ \\\n                     file %s,@ line %d,@ character %d:@]@ \"\n          lpos_start.pos_fname lpos_start.pos_lnum\n          (lpos_start.pos_cnum - lpos_start.pos_bol)\n          lpos_end.pos_fname lpos_end.pos_lnum\n          (lpos_end.pos_cnum - lpos_end.pos_bol)\n      else if lpos_start.pos_lnum != lpos_end.pos_lnum then\n        fprintf ppf \"@[file \\\"%s\\\",@ line %d,@ character %d to@ \\\n                     line %d,@ character %d:@]@ \"\n          lpos_start.pos_fname lpos_start.pos_lnum\n          (lpos_start.pos_cnum - lpos_start.pos_bol)\n          lpos_end.pos_lnum\n          (lpos_end.pos_cnum - lpos_end.pos_bol)\n      else if lpos_start.pos_cnum - lpos_start.pos_bol !=\n              lpos_end.pos_cnum - lpos_end.pos_bol then\n        fprintf ppf \"@[file \\\"%s\\\",@ line %d,@ characters %d to %d:@]@ \"\n          lpos_start.pos_fname lpos_start.pos_lnum\n          (lpos_start.pos_cnum - lpos_start.pos_bol)\n          (lpos_end.pos_cnum - lpos_end.pos_bol)\n      else\n        fprintf ppf \"@[file \\\"%s\\\", line %d, character %d:@]@ \"\n          lpos_start.pos_fname lpos_start.pos_lnum\n          (lpos_start.pos_cnum - lpos_start.pos_bol)\n  | PosDummy ->\n      ()\n\nlet no_out buf pos len = ()\nlet no_flush () = ()\nlet null_formatter = make_formatter no_out no_flush\n\nlet internal_raw (fname, lnum) fmt =\n  let fmt = \"@[<v 2>\" ^^ fmt ^^ \"@]@;@?\" in\n  incr numErrors;\n  let cont ppf =\n    raise Terminate in\n  eprintf \"Internal error occurred at %s:%d,@ \" fname lnum;\n  kfprintf cont err_formatter fmt\n\nand fatal fmt =\n  let fmt = \"@[<v 2>Fatal error: \" ^^ fmt ^^ \"@]@;@?\" in\n  incr numErrors;\n  let cont ppf =\n    raise Terminate in\n  kfprintf cont err_formatter fmt\n\nand error fmt =\n  let fmt = \"@[<v 2>Error: \" ^^ fmt ^^ \"@]@;@?\" in\n  incr numErrors;\n  if !numErrors >= !maxErrors then\n    let cont ppf =\n      eprintf \"Too many errors, aborting...\\n\";\n      raise Terminate in\n    kfprintf cont err_formatter fmt\n  else\n    eprintf fmt\n\nand warning fmt =\n  let fmt = \"@[<v 2>Warning: \" ^^ fmt ^^ \"@]@;@?\" in\n  if !flagWarnings then\n  begin\n    incr numWarnings;\n    if !numWarnings >= !maxWarnings then\n      let cont ppf =\n        eprintf \"Too many warnings, no more will be shown...\\n\";\n        flagWarnings := false in\n      kfprintf cont err_formatter fmt\n    else\n      eprintf fmt\n  end\n  else\n    fprintf null_formatter fmt\n\nand message fmt =\n  let fmt = \"@[<v 2>\" ^^ fmt ^^ \"@]@;@?\" in\n  eprintf fmt\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Error.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 86, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Error.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00214576721191ms
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Error.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 88, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":9},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 89, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 91, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 93, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Error.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","languageId":"ocaml","version":1,"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\n\r\nlet frame_of_lltypes access_link par_lst locvar_lst = \r\n    let arr_of_lltypes = Array.of_list (access_link @ par_lst @ locvar_lst) in\r\n    struct_type context arr_of_lltypes\r\n\r\nlet give_lltype alan_type = exit 1\r\n    (* begin match alan_type with\r\n        | \r\n    end *)\r\n    \r\nlet rec codegen_func func_ast = \r\n    let ll_func_type = \r\n    define_function func_ast.func_id \r\n\r\n\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    -> \r\n            begin match er_op with\r\n                | Plus  -> build_add (codegen_expr er1) (codegen_expr er2) \"add\" builder\r\n                | Minus -> build_sub (codegen_expr er1) (codegen_expr er2) \"sub\" builder\r\n                | Mult  -> build_mul (codegen_expr er1) (codegen_expr er2) \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv (codegen_expr er1) (codegen_expr er2) \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv (codegen_expr er1) (codegen_expr er2) \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem (codegen_expr er1) (codegen_expr er2) \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem (codegen_expr er1) (codegen_expr er2) \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\nand codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00286102294922ms
Sending response {"id": 95, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 96, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":9},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 97, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 98, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 99, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 100, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":45,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0288486480713ms
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":44,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0112056732178ms
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":9},"end":{"line":43,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":43,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 111, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 115, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":22,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 116, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":9},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 119, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 120, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml","languageId":"ocaml","version":1,"text":"open Format\r\n\r\nopen Identifier\r\nopen Types\r\nopen Symbol\r\nopen Ast\r\nopen Error\r\n\r\nlet show_offsets = true\r\n\r\nlet rec pretty_typ ppf typ =\r\n  match typ with\r\n  | TYPE_none ->\r\n      fprintf ppf \"<undefined>\"\r\n  | TYPE_int ->\r\n      fprintf ppf \"int\"\r\n  | TYPE_byte ->\r\n      fprintf ppf \"byte\"\r\n  | TYPE_array (et, sz) ->\r\n      pretty_typ ppf et;\r\n      if sz > 0 then\r\n        fprintf ppf \" [%d]\" sz\r\n      else\r\n        fprintf ppf \" []\"\r\n  | TYPE_proc ->\r\n      fprintf ppf \"proc\"\r\n\r\nlet pretty_mode ppf mode =\r\n  match mode with\r\n  | PASS_BY_REFERENCE ->\r\n      fprintf ppf \"reference \"\r\n  | _ ->\r\n      ()\r\n\r\nlet printSymbolTable () =\r\n  let rec walk ppf scp =\r\n    if scp.sco_nesting <> 0 then begin\r\n      fprintf ppf \"scope: \";\r\n      let entry ppf e =\r\n        fprintf ppf \"%a\" pretty_id e.entry_id;\r\n        match e.entry_info with\r\n        | ENTRY_none ->\r\n            fprintf ppf \"<none>\"\r\n        | ENTRY_variable inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.variable_offset\r\n        | ENTRY_function inf ->\r\n            let param ppf e =\r\n              match e.entry_info with\r\n                | ENTRY_parameter inf ->\r\n                   fprintf ppf \"%a%a : %a\"\r\n                      pretty_mode inf.parameter_mode\r\n                      pretty_id e.entry_id\r\n                      pretty_typ inf.parameter_type\r\n                | _ ->\r\n                    fprintf ppf \"<invalid>\" in\r\n            let rec params ppf ps =\r\n              match ps with\r\n              | [p] ->\r\n                  fprintf ppf \"%a\" param p\r\n              | p :: ps ->\r\n                  fprintf ppf \"%a; %a\" param p params ps;\r\n              | [] ->\r\n                  () in\r\n            fprintf ppf \"(%a) : %a\"\r\n              params inf.function_paramlist\r\n              pretty_typ inf.function_result\r\n        | ENTRY_parameter inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.parameter_offset\r\n        | ENTRY_temporary inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.temporary_offset in\r\n      let rec entries ppf es =\r\n        match es with\r\n          | [e] ->\r\n              fprintf ppf \"%a\" entry e\r\n          | e :: es ->\r\n              fprintf ppf \"%a, %a\" entry e entries es;\r\n          | [] ->\r\n              () in\r\n      match scp.sco_parent with\r\n      | Some scpar ->\r\n          fprintf ppf \"%a\\n%a\"\r\n            entries scp.sco_entries\r\n            walk scpar\r\n      | None ->\r\n          fprintf ppf \"<impossible>\\n\"\r\n    end in\r\n  let scope ppf scp =\r\n    if scp.sco_nesting == 0 then\r\n      fprintf ppf \"no scope\\n\"\r\n    else\r\n      walk ppf scp in\r\n  printf \"%a----------------------------------------\\n\"\r\n    scope !currentScope\r\n\r\nlet funTypeStack = Stack.create ()\r\n\r\n\r\n    \r\nlet seman tree =\r\n\r\n    (* help funcs *)\r\n    \r\n    let rec make_cond cond_ast =\r\n        match cond_ast with\r\n            | C_true ->\r\n                ()\r\n                \r\n            | C_false ->\r\n                ()\r\n                \r\n            | (C_not cond_cond) ->\r\n                make_cond cond_cond\r\n                \r\n            | C_compare (cond_expr_left, cond_compare_op, cond_expr_right) ->\r\n                make_expr cond_expr_left;\r\n                make_expr cond_expr_right;\r\n                if( (cond_expr_left.expr_type = Some TYPE_int || cond_expr_left.expr_type = Some TYPE_byte) && cond_expr_left.expr_type = cond_expr_right.expr_type )\r\n                then( () )\r\n                else( fatal \"Compare type mismatch\" )\r\n                \r\n            | C_logic (cond_cond_left, cond_logic_op, cond_cond_right) ->\r\n                make_cond cond_cond_left;\r\n                make_cond cond_cond_right\r\n    \r\n    (*check if parameter call is ok*)\r\n    and make_call func_call_ast =\r\n        let e = lookupEntry (id_make func_call_ast.call_id) LOOKUP_ALL_SCOPES true in\r\n        begin match e.entry_info with\r\n        | ENTRY_function func_entry ->\r\n            List.iter make_expr func_call_ast.call_expr;\r\n            \r\n            let get_param_typ param_entry = match param_entry.entry_info with \r\n                                        | ENTRY_parameter par -> (par.parameter_type,par.parameter_mode)\r\n                                        | _ -> fatal \"Parameter declaration gone wrong -- Why?\"; (TYPE_none,PASS_BY_VALUE)\r\n            in\r\n            let get_actual_param_typ expr_ = match expr_.expr_type with\r\n                                            | Some ex_type_some -> (ex_type_some,expr_.expr_raw)\r\n                                            | None -> fatal \"Sth gone terribly wrong\"; (TYPE_none,E_int 0)\r\n            in\r\n            \r\n            let declared_param_typ_lst = List.map get_param_typ func_entry.function_paramlist in\r\n            let actual_param_typ_lst = List.map get_actual_param_typ func_call_ast.call_expr in\r\n            \r\n            let equal_declared_actual (dec_type,dec_mode) (act_type,act_raw) = \r\n                match (dec_mode, act_raw) with\r\n                    | (PASS_BY_VALUE, _) -> equalType dec_type act_type\r\n                    | (PASS_BY_REFERENCE, E_val _) -> equalType dec_type act_type\r\n                    | _ -> false\r\n            in\r\n            \r\n            let myPrint_dec (s,info) =\r\n                pretty_typ std_formatter s;\r\n                match info with\r\n                    | PASS_BY_VALUE -> fprintf std_formatter \"[PASS_BY_VALUE] \"\r\n                    | PASS_BY_REFERENCE -> fprintf std_formatter \"[PASS_BY_REFERENCE] \"\r\n            in\r\n            \r\n            let myPrint_act (s,info) =\r\n                pretty_typ std_formatter s;\r\n                match info with\r\n                    | E_val _ -> fprintf std_formatter \"[L_value] \"\r\n                    | _ -> fprintf std_formatter \"[NOT_L_value] \"\r\n            in\r\n\r\n            if( ( List.length declared_param_typ_lst = List.length actual_param_typ_lst ) && \r\n                ( List.for_all2 equal_declared_actual declared_param_typ_lst actual_param_typ_lst )\r\n              )\r\n            \r\n            then( func_call_ast.return_type <- Some func_entry.function_result )\r\n            \r\n            else(\r\n                Printf.printf \"%s\" \"Expected parameters: \";\r\n                List.iter myPrint_dec declared_param_typ_lst;\r\n                print_newline ();\r\n                Printf.printf \"%s\" \"Given parameters:    \"; \r\n                List.iter myPrint_act actual_param_typ_lst;\r\n                print_newline ();\r\n                fatal \"Incorrect argument format\" \r\n            )\r\n            \r\n        | _ ->\r\n            fatal \"Call of a non-function\"\r\n        end\r\n    and make_expr expr_ast = \r\n        match expr_ast.expr_raw with\r\n            | E_int ex_int -> \r\n                expr_ast.expr_type <- Some TYPE_int\r\n                \r\n            | E_char ex_char -> \r\n                expr_ast.expr_type <- Some TYPE_byte\r\n                \r\n            | E_val ex_l_value ->\r\n                make_l_value ex_l_value;\r\n                expr_ast.expr_type <- ex_l_value.l_value_type\r\n                \r\n            | E_call ex_func_call ->\r\n                make_call ex_func_call;\r\n                expr_ast.expr_type <- ex_func_call.return_type\r\n                \r\n            | E_sign (ex_sign, ex_expr) ->\r\n                make_expr ex_expr;\r\n                if(ex_expr.expr_type = Some TYPE_int)\r\n                then(expr_ast.expr_type <- ex_expr.expr_type)\r\n                else(fatal \"Sign must be followed by an integer\")\r\n                \r\n            | E_op (ex_expr_left, ex_op, ex_expr_right) ->\r\n                make_expr ex_expr_left;\r\n                make_expr ex_expr_right;\r\n                \r\n                if((ex_expr_left.expr_type = Some TYPE_int || ex_expr_left.expr_type = Some TYPE_byte) && ex_expr_left.expr_type = ex_expr_right.expr_type)\r\n                then(expr_ast.expr_type <- ex_expr_left.expr_type)\r\n                else(fatal \"Type mismatch\")\r\n            \r\n    and make_l_value l_value_ast =\r\n        match l_value_ast.l_value_raw with\r\n            | L_exp (lval_id, lval_expr_opt) ->\r\n                let e = lookupEntry (id_make lval_id) LOOKUP_ALL_SCOPES true in\r\n                let e_typ = match e.entry_info with\r\n                    | ENTRY_variable var_info ->\r\n                        Some var_info.variable_type\r\n                    | ENTRY_parameter par_info ->\r\n                        Some par_info.parameter_type\r\n                    | _ -> \r\n                        fatal \"Identifier not valid\";\r\n                        None\r\n                in\r\n                begin match lval_expr_opt with\r\n                    | Some lval_expr_some -> \r\n                        (*Check if not array*)\r\n                        begin match e_typ with\r\n                            | Some (TYPE_array (elem_typ,_)) -> \r\n                                make_expr lval_expr_some;\r\n                                (*Check if index is int*)\r\n                                if( lval_expr_some.expr_type <> Some TYPE_int )\r\n                                then( fatal \"Array index must be an integer\" );\r\n                                l_value_ast.l_value_type <- Some elem_typ;\r\n                                (* Nesting *)\r\n                                l_value_ast.l_value_nesting_scope <- e.entry_scope.sco_nesting;\r\n                                \r\n                            | _ -> \r\n                                fatal \"Variable not an array\"\r\n                        end\r\n                    | None ->\r\n                        l_value_ast.l_value_type <- e_typ;\r\n                        (* Nesting *)\r\n                        l_value_ast.l_value_nesting_scope <- e.entry_scope.sco_nesting;\r\n                end\r\n            | L_str lval_str -> (*String literal = TYPE_array (TYPE_byte,size < 0)*)\r\n                l_value_ast.l_value_type <- Some TYPE_array (TYPE_byte,-1)\r\n    in\r\n    \r\n    let rec make_stmt stmt_ast = \r\n        match stmt_ast with\r\n            | Null_stmt -> \r\n                ()\r\n                \r\n            | S_assign (st_l_value, st_expr) ->\r\n                make_expr st_expr;\r\n                make_l_value st_l_value;\r\n                begin match (st_l_value.l_value_type, st_expr.expr_type) with\r\n                    | (Some TYPE_array (TYPE_byte,siz),_)   -> if( siz < 0 ) then ( fatal \"Cannot assign value to a string literal\" )\r\n                    | (Some TYPE_proc,_)                    -> fatal \"L value is a procedure -- How did this happen?\" (*Obsolete*)\r\n                    | (_,Some TYPE_proc)                    -> fatal \"Cannot assign a procedure\" (*Obsolete*)\r\n                    | (typ1,typ2)                           -> if(typ1 <> typ2)then(fatal \"Assignment type mismatch\")\r\n                end\r\n                \r\n            | S_comp st_stmt_lst ->\r\n                List.iter make_stmt st_stmt_lst\r\n                \r\n            | S_call st_func_call -> \r\n                make_call st_func_call\r\n                \r\n            | S_if (st_cond,st_stmt,st_stmt_opt) ->\r\n                make_cond st_cond;\r\n                make_stmt st_stmt;\r\n                begin match st_stmt_opt with\r\n                    | Some st_stmt_some -> \r\n                        make_stmt st_stmt_some\r\n                    | None -> \r\n                        ()\r\n                end\r\n                    \r\n            | S_while (st_cond,st_stmt) -> \r\n                make_cond st_cond;\r\n                make_stmt st_stmt\r\n                \r\n            | S_return st_expr_opt -> \r\n                let funTypeTop = Stack.pop funTypeStack in\r\n                begin match st_expr_opt with\r\n                    | Some st_expr_some ->\r\n                        Stack.push funTypeTop funTypeStack;\r\n                        if( funTypeTop = TYPE_proc )\r\n                        then( fatal \"Procedure cannot return a value\" )\r\n                        else( make_expr st_expr_some; if( st_expr_some.expr_type <> Some funTypeTop ) then ( fatal \"Return type mismatch\" ) )\r\n                    | None ->\r\n                        Stack.push funTypeTop funTypeStack;\r\n                        if( funTypeTop <> TYPE_proc )\r\n                        then( fatal \"Return statement cannot be empty here\" )\r\n                end        \r\n    in\r\n    \r\n    let make_par f par_ast =\r\n        match (par_ast.par_type,par_ast.par_pass_way) with\r\n            | (TYPE_array _, PASS_BY_VALUE) -> fatal \"An array cannot be passed by value\"\r\n            | _ -> ignore (newParameter (id_make par_ast.par_id) par_ast.par_type par_ast.par_pass_way f true); ()\r\n    in\r\n    \r\n    let rec make_local local_ast = \r\n        match local_ast with\r\n            | Local_func loc_func ->\r\n                make_func loc_func;\r\n                ()\r\n            | Local_var loc_var ->\r\n                (*In case an array is declared, its size needs to be a positive integer*)\r\n                begin match loc_var.var_type with\r\n                    | TYPE_array (_,siz)    -> if(siz <= 0)then(fatal \"Array size must be a positive integer\")\r\n                    | _                     -> ()\r\n                end;\r\n                ignore (newVariable (id_make loc_var.var_id) loc_var.var_type true);\r\n                ()\r\n                \r\n    and make_func f_ast =\r\n        \r\n        let f_SYM = newFunction (id_make f_ast.func_id) true in\r\n        Stack.push f_ast.func_type funTypeStack;\r\n        (* Nesting *)\r\n        f_ast.func_nesting_scope <- f_SYM.entry_scope.sco_nesting;\r\n        \r\n        openScope ();\r\n        \r\n        List.iter (make_par f_SYM) f_ast.func_pars;\r\n        endFunctionHeader f_SYM f_ast.func_type;\r\n        \r\n        List.iter make_local f_ast.func_local;\r\n        List.iter make_stmt f_ast.func_stmt;\r\n        \r\n        (* printSymbolTable (); *)\r\n        closeScope ();\r\n        ignore (Stack.pop funTypeStack);\r\n        ()\r\n    in\r\n    \r\n    initSymbolTable 256;\r\n    openScope ();\r\n    \r\n(********* add existing functions **********************************************************************************************************************)\r\n    \r\n(***************** writeInteger (n : int) : proc *******************************************************************************************************)\r\n    let f_wInt = newFunction (id_make \"writeInteger\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wInt {par_id = \"n\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n    endFunctionHeader f_wInt TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeByte (b : byte) : proc *********************************************************************************************************)\r\n    let f_wByte = newFunction (id_make \"writeByte\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wByte {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_wByte TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeChar (b : byte) : proc *********************************************************************************************************)\r\n    let f_wChar = newFunction (id_make \"writeChar\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wChar {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_wChar TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeString (s : reference byte []) : proc ******************************************************************************************)\r\n    let f_wStr = newFunction (id_make \"writeString\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wStr {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n    endFunctionHeader f_wStr TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readInteger () : int ****************************************************************************************************************)\r\n    let f_rInt = newFunction (id_make \"readInteger\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rInt TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readByte () : byte ******************************************************************************************************************)\r\n    let f_rByte = newFunction (id_make \"readByte\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rByte TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readChar () : byte ******************************************************************************************************************)\r\n    let f_rChar = newFunction (id_make \"readChar\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rChar TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readString (n : int, s : reference byte []) : proc **********************************************************************************)\r\n    let f_rStr = newFunction (id_make \"readString\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_rStr) [{par_id = \"n\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n                                 {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_rStr TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** extend (b : byte) : int *************************************************************************************************************)\r\n    let f_ext = newFunction(id_make \"extend\") true in\r\n    openScope ();\r\n    \r\n    make_par f_ext {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_ext TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** shrink (i : int) : byte *************************************************************************************************************)\r\n    let f_shrink = newFunction(id_make \"shrink\") true in\r\n    openScope ();\r\n    \r\n    make_par f_shrink {par_id = \"i\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n    endFunctionHeader f_shrink TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strlen (s : reference byte []) : int ************************************************************************************************)\r\n    let f_len = newFunction(id_make \"strlen\") true in\r\n    openScope ();\r\n    \r\n    make_par f_len {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n    endFunctionHeader f_len TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcmp (s1 : reference byte [], s2 : reference byte []) : int ***********************************************************************)\r\n    let f_cmp = newFunction (id_make \"strcmp\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cmp) [{par_id = \"s1\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"s2\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cmp TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcpy (trg : reference byte [], src : reference byte []) : proc ********************************************************************)\r\n    let f_cpy = newFunction (id_make \"strcpy\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cpy) [{par_id = \"trg\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"src\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cpy TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcat (trg : reference byte [], src : reference byte []) : proc ********************************************************************)\r\n    let f_cat = newFunction (id_make \"strcat\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cat) [{par_id = \"trg\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"src\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cat TYPE_proc;\r\n\r\n    closeScope ();\r\n    \r\n(********* end of existing functions *******************************************************************************************************************)\r\n\r\n    make_func tree;\r\n    \r\n    closeScope ();\r\n\r\n    (****** end of seman ******)"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00286102294922ms
Sending response {"id": 122, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 123, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":327,"character":25},"end":{"line":327,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":334,"character":38},"end":{"line":334,"character":47}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 125, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":327,"character":25},"end":{"line":327,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":334,"character":38},"end":{"line":334,"character":47}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":327,"character":25},"end":{"line":327,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml","version":2},"contentChanges":[{"text":"open Format\r\n\r\nopen Identifier\r\nopen Types\r\nopen Symbol\r\nopen Ast\r\nopen Error\r\n\r\nlet show_offsets = true\r\n\r\nlet rec pretty_typ ppf typ =\r\n  match typ with\r\n  | TYPE_none ->\r\n      fprintf ppf \"<undefined>\"\r\n  | TYPE_int ->\r\n      fprintf ppf \"int\"\r\n  | TYPE_byte ->\r\n      fprintf ppf \"byte\"\r\n  | TYPE_array (et, sz) ->\r\n      pretty_typ ppf et;\r\n      if sz > 0 then\r\n        fprintf ppf \" [%d]\" sz\r\n      else\r\n        fprintf ppf \" []\"\r\n  | TYPE_proc ->\r\n      fprintf ppf \"proc\"\r\n\r\nlet pretty_mode ppf mode =\r\n  match mode with\r\n  | PASS_BY_REFERENCE ->\r\n      fprintf ppf \"reference \"\r\n  | _ ->\r\n      ()\r\n\r\nlet printSymbolTable () =\r\n  let rec walk ppf scp =\r\n    if scp.sco_nesting <> 0 then begin\r\n      fprintf ppf \"scope: \";\r\n      let entry ppf e =\r\n        fprintf ppf \"%a\" pretty_id e.entry_id;\r\n        match e.entry_info with\r\n        | ENTRY_none ->\r\n            fprintf ppf \"<none>\"\r\n        | ENTRY_variable inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.variable_offset\r\n        | ENTRY_function inf ->\r\n            let param ppf e =\r\n              match e.entry_info with\r\n                | ENTRY_parameter inf ->\r\n                   fprintf ppf \"%a%a : %a\"\r\n                      pretty_mode inf.parameter_mode\r\n                      pretty_id e.entry_id\r\n                      pretty_typ inf.parameter_type\r\n                | _ ->\r\n                    fprintf ppf \"<invalid>\" in\r\n            let rec params ppf ps =\r\n              match ps with\r\n              | [p] ->\r\n                  fprintf ppf \"%a\" param p\r\n              | p :: ps ->\r\n                  fprintf ppf \"%a; %a\" param p params ps;\r\n              | [] ->\r\n                  () in\r\n            fprintf ppf \"(%a) : %a\"\r\n              params inf.function_paramlist\r\n              pretty_typ inf.function_result\r\n        | ENTRY_parameter inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.parameter_offset\r\n        | ENTRY_temporary inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.temporary_offset in\r\n      let rec entries ppf es =\r\n        match es with\r\n          | [e] ->\r\n              fprintf ppf \"%a\" entry e\r\n          | e :: es ->\r\n              fprintf ppf \"%a, %a\" entry e entries es;\r\n          | [] ->\r\n              () in\r\n      match scp.sco_parent with\r\n      | Some scpar ->\r\n          fprintf ppf \"%a\\n%a\"\r\n            entries scp.sco_entries\r\n            walk scpar\r\n      | None ->\r\n          fprintf ppf \"<impossible>\\n\"\r\n    end in\r\n  let scope ppf scp =\r\n    if scp.sco_nesting == 0 then\r\n      fprintf ppf \"no scope\\n\"\r\n    else\r\n      walk ppf scp in\r\n  printf \"%a----------------------------------------\\n\"\r\n    scope !currentScope\r\n\r\nlet funTypeStack = Stack.create ()\r\n\r\n\r\n    \r\nlet seman tree =\r\n\r\n    (* help funcs *)\r\n    \r\n    let rec make_cond cond_ast =\r\n        match cond_ast with\r\n            | C_true ->\r\n                ()\r\n                \r\n            | C_false ->\r\n                ()\r\n                \r\n            | (C_not cond_cond) ->\r\n                make_cond cond_cond\r\n                \r\n            | C_compare (cond_expr_left, cond_compare_op, cond_expr_right) ->\r\n                make_expr cond_expr_left;\r\n                make_expr cond_expr_right;\r\n                if( (cond_expr_left.expr_type = Some TYPE_int || cond_expr_left.expr_type = Some TYPE_byte) && cond_expr_left.expr_type = cond_expr_right.expr_type )\r\n                then( () )\r\n                else( fatal \"Compare type mismatch\" )\r\n                \r\n            | C_logic (cond_cond_left, cond_logic_op, cond_cond_right) ->\r\n                make_cond cond_cond_left;\r\n                make_cond cond_cond_right\r\n    \r\n    (*check if parameter call is ok*)\r\n    and make_call func_call_ast =\r\n        let e = lookupEntry (id_make func_call_ast.call_id) LOOKUP_ALL_SCOPES true in\r\n        begin match e.entry_info with\r\n        | ENTRY_function func_entry ->\r\n            List.iter make_expr func_call_ast.call_expr;\r\n            \r\n            let get_param_typ param_entry = match param_entry.entry_info with \r\n                                        | ENTRY_parameter par -> (par.parameter_type,par.parameter_mode)\r\n                                        | _ -> fatal \"Parameter declaration gone wrong -- Why?\"; (TYPE_none,PASS_BY_VALUE)\r\n            in\r\n            let get_actual_param_typ expr_ = match expr_.expr_type with\r\n                                            | Some ex_type_some -> (ex_type_some,expr_.expr_raw)\r\n                                            | None -> fatal \"Sth gone terribly wrong\"; (TYPE_none,E_int 0)\r\n            in\r\n            \r\n            let declared_param_typ_lst = List.map get_param_typ func_entry.function_paramlist in\r\n            let actual_param_typ_lst = List.map get_actual_param_typ func_call_ast.call_expr in\r\n            \r\n            let equal_declared_actual (dec_type,dec_mode) (act_type,act_raw) = \r\n                match (dec_mode, act_raw) with\r\n                    | (PASS_BY_VALUE, _) -> equalType dec_type act_type\r\n                    | (PASS_BY_REFERENCE, E_val _) -> equalType dec_type act_type\r\n                    | _ -> false\r\n            in\r\n            \r\n            let myPrint_dec (s,info) =\r\n                pretty_typ std_formatter s;\r\n                match info with\r\n                    | PASS_BY_VALUE -> fprintf std_formatter \"[PASS_BY_VALUE] \"\r\n                    | PASS_BY_REFERENCE -> fprintf std_formatter \"[PASS_BY_REFERENCE] \"\r\n            in\r\n            \r\n            let myPrint_act (s,info) =\r\n                pretty_typ std_formatter s;\r\n                match info with\r\n                    | E_val _ -> fprintf std_formatter \"[L_value] \"\r\n                    | _ -> fprintf std_formatter \"[NOT_L_value] \"\r\n            in\r\n\r\n            if( ( List.length declared_param_typ_lst = List.length actual_param_typ_lst ) && \r\n                ( List.for_all2 equal_declared_actual declared_param_typ_lst actual_param_typ_lst )\r\n              )\r\n            \r\n            then( func_call_ast.return_type <- Some func_entry.function_result )\r\n            \r\n            else(\r\n                Printf.printf \"%s\" \"Expected parameters: \";\r\n                List.iter myPrint_dec declared_param_typ_lst;\r\n                print_newline ();\r\n                Printf.printf \"%s\" \"Given parameters:    \"; \r\n                List.iter myPrint_act actual_param_typ_lst;\r\n                print_newline ();\r\n                fatal \"Incorrect argument format\" \r\n            )\r\n            \r\n        | _ ->\r\n            fatal \"Call of a non-function\"\r\n        end\r\n    and make_expr expr_ast = \r\n        match expr_ast.expr_raw with\r\n            | E_int ex_int -> \r\n                expr_ast.expr_type <- Some TYPE_int\r\n                \r\n            | E_char ex_char -> \r\n                expr_ast.expr_type <- Some TYPE_byte\r\n                \r\n            | E_val ex_l_value ->\r\n                make_l_value ex_l_value;\r\n                expr_ast.expr_type <- ex_l_value.l_value_type\r\n                \r\n            | E_call ex_func_call ->\r\n                make_call ex_func_call;\r\n                expr_ast.expr_type <- ex_func_call.return_type\r\n                \r\n            | E_sign (ex_sign, ex_expr) ->\r\n                make_expr ex_expr;\r\n                if(ex_expr.expr_type = Some TYPE_int)\r\n                then(expr_ast.expr_type <- ex_expr.expr_type)\r\n                else(fatal \"Sign must be followed by an integer\")\r\n                \r\n            | E_op (ex_expr_left, ex_op, ex_expr_right) ->\r\n                make_expr ex_expr_left;\r\n                make_expr ex_expr_right;\r\n                \r\n                if((ex_expr_left.expr_type = Some TYPE_int || ex_expr_left.expr_type = Some TYPE_byte) && ex_expr_left.expr_type = ex_expr_right.expr_type)\r\n                then(expr_ast.expr_type <- ex_expr_left.expr_type)\r\n                else(fatal \"Type mismatch\")\r\n            \r\n    and make_l_value l_value_ast =\r\n        match l_value_ast.l_value_raw with\r\n            | L_exp (lval_id, lval_expr_opt) ->\r\n                let e = lookupEntry (id_make lval_id) LOOKUP_ALL_SCOPES true in\r\n                let e_typ = match e.entry_info with\r\n                    | ENTRY_variable var_info ->\r\n                        Some var_info.variable_type\r\n                    | ENTRY_parameter par_info ->\r\n                        Some par_info.parameter_type\r\n                    | _ -> \r\n                        fatal \"Identifier not valid\";\r\n                        None\r\n                in\r\n                begin match lval_expr_opt with\r\n                    | Some lval_expr_some -> \r\n                        (*Check if not array*)\r\n                        begin match e_typ with\r\n                            | Some (TYPE_array (elem_typ,_)) -> \r\n                                make_expr lval_expr_some;\r\n                                (*Check if index is int*)\r\n                                if( lval_expr_some.expr_type <> Some TYPE_int )\r\n                                then( fatal \"Array index must be an integer\" );\r\n                                l_value_ast.l_value_type <- Some elem_typ;\r\n                                (* Nesting *)\r\n                                l_value_ast.l_value_nesting_scope <- e.entry_scope.sco_nesting;\r\n                                \r\n                            | _ -> \r\n                                fatal \"Variable not an array\"\r\n                        end\r\n                    | None ->\r\n                        l_value_ast.l_value_type <- e_typ;\r\n                        (* Nesting *)\r\n                        l_value_ast.l_value_nesting_scope <- e.entry_scope.sco_nesting;\r\n                end\r\n            | L_str lval_str -> (*String literal = TYPE_array (TYPE_byte,size < 0)*)\r\n                l_value_ast.l_value_type <- Some TYPE_array (TYPE_byte,-1)\r\n    in\r\n    \r\n    let rec make_stmt stmt_ast = \r\n        match stmt_ast with\r\n            | Null_stmt -> \r\n                ()\r\n                \r\n            | S_assign (st_l_value, st_expr) ->\r\n                make_expr st_expr;\r\n                make_l_value st_l_value;\r\n                begin match (st_l_value.l_value_type, st_expr.expr_type) with\r\n                    | (Some TYPE_array (TYPE_byte,siz),_)   -> if( siz < 0 ) then ( fatal \"Cannot assign value to a string literal\" )\r\n                    | (Some TYPE_proc,_)                    -> fatal \"L value is a procedure -- How did this happen?\" (*Obsolete*)\r\n                    | (_,Some TYPE_proc)                    -> fatal \"Cannot assign a procedure\" (*Obsolete*)\r\n                    | (typ1,typ2)                           -> if(typ1 <> typ2)then(fatal \"Assignment type mismatch\")\r\n                end\r\n                \r\n            | S_comp st_stmt_lst ->\r\n                List.iter make_stmt st_stmt_lst\r\n                \r\n            | S_call st_func_call -> \r\n                make_call st_func_call\r\n                \r\n            | S_if (st_cond,st_stmt,st_stmt_opt) ->\r\n                make_cond st_cond;\r\n                make_stmt st_stmt;\r\n                begin match st_stmt_opt with\r\n                    | Some st_stmt_some -> \r\n                        make_stmt st_stmt_some\r\n                    | None -> \r\n                        ()\r\n                end\r\n                    \r\n            | S_while (st_cond,st_stmt) -> \r\n                make_cond st_cond;\r\n                make_stmt st_stmt\r\n                \r\n            | S_return st_expr_opt -> \r\n                let funTypeTop = Stack.pop funTypeStack in\r\n                begin match st_expr_opt with\r\n                    | Some st_expr_some ->\r\n                        Stack.push funTypeTop funTypeStack;\r\n                        if( funTypeTop = TYPE_proc )\r\n                        then( fatal \"Procedure cannot return a value\" )\r\n                        else( make_expr st_expr_some; if( st_expr_some.expr_type <> Some funTypeTop ) then ( fatal \"Return type mismatch\" ) )\r\n                    | None ->\r\n                        Stack.push funTypeTop funTypeStack;\r\n                        if( funTypeTop <> TYPE_proc )\r\n                        then( fatal \"Return statement cannot be empty here\" )\r\n                end        \r\n    in\r\n    \r\n    let make_par f par_ast =\r\n        match (par_ast.par_type,par_ast.par_pass_way) with\r\n            | (TYPE_array _, PASS_BY_VALUE) -> fatal \"An array cannot be passed by value\"\r\n            | _ -> ignore (newParameter (id_make par_ast.par_id) par_ast.par_type par_ast.par_pass_way f true); ()\r\n    in\r\n    \r\n    let rec make_local local_ast = \r\n        match local_ast with\r\n            | Local_func loc_func ->\r\n                make_func loc_func;\r\n                ()\r\n            | Local_var loc_var ->\r\n                (*In case an array is declared, its size needs to be a positive integer*)\r\n                begin match loc_var.var_type with\r\n                    | TYPE_array (_,siz)    -> if(siz <= 0)then(fatal \"Array size must be a positive integer\")\r\n                    | _                     -> ()\r\n                end;\r\n                ignore (newVariable (id_make loc_var.var_id) loc_var.var_type true);\r\n                ()\r\n                \r\n    and make_func f_ast =\r\n        \r\n        let f_SYM = newFunction (id_make f_ast.func_id) true in\r\n        Stack.push f_ast.func_ret_type funTypeStack;\r\n        (* Nesting *)\r\n        f_ast.func_nesting_scope <- f_SYM.entry_scope.sco_nesting;\r\n        \r\n        openScope ();\r\n        \r\n        List.iter (make_par f_SYM) f_ast.func_pars;\r\n        endFunctionHeader f_SYM f_ast.func_ret_type;\r\n        \r\n        List.iter make_local f_ast.func_local;\r\n        List.iter make_stmt f_ast.func_stmt;\r\n        \r\n        (* printSymbolTable (); *)\r\n        closeScope ();\r\n        ignore (Stack.pop funTypeStack);\r\n        ()\r\n    in\r\n    \r\n    initSymbolTable 256;\r\n    openScope ();\r\n    \r\n(********* add existing functions **********************************************************************************************************************)\r\n    \r\n(***************** writeInteger (n : int) : proc *******************************************************************************************************)\r\n    let f_wInt = newFunction (id_make \"writeInteger\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wInt {par_id = \"n\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n    endFunctionHeader f_wInt TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeByte (b : byte) : proc *********************************************************************************************************)\r\n    let f_wByte = newFunction (id_make \"writeByte\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wByte {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_wByte TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeChar (b : byte) : proc *********************************************************************************************************)\r\n    let f_wChar = newFunction (id_make \"writeChar\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wChar {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_wChar TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeString (s : reference byte []) : proc ******************************************************************************************)\r\n    let f_wStr = newFunction (id_make \"writeString\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wStr {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n    endFunctionHeader f_wStr TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readInteger () : int ****************************************************************************************************************)\r\n    let f_rInt = newFunction (id_make \"readInteger\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rInt TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readByte () : byte ******************************************************************************************************************)\r\n    let f_rByte = newFunction (id_make \"readByte\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rByte TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readChar () : byte ******************************************************************************************************************)\r\n    let f_rChar = newFunction (id_make \"readChar\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rChar TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readString (n : int, s : reference byte []) : proc **********************************************************************************)\r\n    let f_rStr = newFunction (id_make \"readString\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_rStr) [{par_id = \"n\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n                                 {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_rStr TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** extend (b : byte) : int *************************************************************************************************************)\r\n    let f_ext = newFunction(id_make \"extend\") true in\r\n    openScope ();\r\n    \r\n    make_par f_ext {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_ext TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** shrink (i : int) : byte *************************************************************************************************************)\r\n    let f_shrink = newFunction(id_make \"shrink\") true in\r\n    openScope ();\r\n    \r\n    make_par f_shrink {par_id = \"i\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n    endFunctionHeader f_shrink TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strlen (s : reference byte []) : int ************************************************************************************************)\r\n    let f_len = newFunction(id_make \"strlen\") true in\r\n    openScope ();\r\n    \r\n    make_par f_len {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n    endFunctionHeader f_len TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcmp (s1 : reference byte [], s2 : reference byte []) : int ***********************************************************************)\r\n    let f_cmp = newFunction (id_make \"strcmp\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cmp) [{par_id = \"s1\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"s2\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cmp TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcpy (trg : reference byte [], src : reference byte []) : proc ********************************************************************)\r\n    let f_cpy = newFunction (id_make \"strcpy\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cpy) [{par_id = \"trg\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"src\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cpy TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcat (trg : reference byte [], src : reference byte []) : proc ********************************************************************)\r\n    let f_cat = newFunction (id_make \"strcat\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cat) [{par_id = \"trg\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"src\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cat TYPE_proc;\r\n\r\n    closeScope ();\r\n    \r\n(********* end of existing functions *******************************************************************************************************************)\r\n\r\n    make_func tree;\r\n    \r\n    closeScope ();\r\n\r\n    (****** end of seman ******)"}]}}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0169277191162ms
Sending response {"id": 129, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 130, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml","version":2},"contentChanges":[{"text":"open Format\r\n\r\nopen Identifier\r\nopen Types\r\nopen Symbol\r\nopen Ast\r\nopen Error\r\n\r\nlet show_offsets = true\r\n\r\nlet rec pretty_typ ppf typ =\r\n  match typ with\r\n  | TYPE_none ->\r\n      fprintf ppf \"<undefined>\"\r\n  | TYPE_int ->\r\n      fprintf ppf \"int\"\r\n  | TYPE_byte ->\r\n      fprintf ppf \"byte\"\r\n  | TYPE_array (et, sz) ->\r\n      pretty_typ ppf et;\r\n      if sz > 0 then\r\n        fprintf ppf \" [%d]\" sz\r\n      else\r\n        fprintf ppf \" []\"\r\n  | TYPE_proc ->\r\n      fprintf ppf \"proc\"\r\n\r\nlet pretty_mode ppf mode =\r\n  match mode with\r\n  | PASS_BY_REFERENCE ->\r\n      fprintf ppf \"reference \"\r\n  | _ ->\r\n      ()\r\n\r\nlet printSymbolTable () =\r\n  let rec walk ppf scp =\r\n    if scp.sco_nesting <> 0 then begin\r\n      fprintf ppf \"scope: \";\r\n      let entry ppf e =\r\n        fprintf ppf \"%a\" pretty_id e.entry_id;\r\n        match e.entry_info with\r\n        | ENTRY_none ->\r\n            fprintf ppf \"<none>\"\r\n        | ENTRY_variable inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.variable_offset\r\n        | ENTRY_function inf ->\r\n            let param ppf e =\r\n              match e.entry_info with\r\n                | ENTRY_parameter inf ->\r\n                   fprintf ppf \"%a%a : %a\"\r\n                      pretty_mode inf.parameter_mode\r\n                      pretty_id e.entry_id\r\n                      pretty_typ inf.parameter_type\r\n                | _ ->\r\n                    fprintf ppf \"<invalid>\" in\r\n            let rec params ppf ps =\r\n              match ps with\r\n              | [p] ->\r\n                  fprintf ppf \"%a\" param p\r\n              | p :: ps ->\r\n                  fprintf ppf \"%a; %a\" param p params ps;\r\n              | [] ->\r\n                  () in\r\n            fprintf ppf \"(%a) : %a\"\r\n              params inf.function_paramlist\r\n              pretty_typ inf.function_result\r\n        | ENTRY_parameter inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.parameter_offset\r\n        | ENTRY_temporary inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.temporary_offset in\r\n      let rec entries ppf es =\r\n        match es with\r\n          | [e] ->\r\n              fprintf ppf \"%a\" entry e\r\n          | e :: es ->\r\n              fprintf ppf \"%a, %a\" entry e entries es;\r\n          | [] ->\r\n              () in\r\n      match scp.sco_parent with\r\n      | Some scpar ->\r\n          fprintf ppf \"%a\\n%a\"\r\n            entries scp.sco_entries\r\n            walk scpar\r\n      | None ->\r\n          fprintf ppf \"<impossible>\\n\"\r\n    end in\r\n  let scope ppf scp =\r\n    if scp.sco_nesting == 0 then\r\n      fprintf ppf \"no scope\\n\"\r\n    else\r\n      walk ppf scp in\r\n  printf \"%a----------------------------------------\\n\"\r\n    scope !currentScope\r\n\r\nlet funTypeStack = Stack.create ()\r\n\r\n\r\n    \r\nlet seman tree =\r\n\r\n    (* help funcs *)\r\n    \r\n    let rec make_cond cond_ast =\r\n        match cond_ast with\r\n            | C_true ->\r\n                ()\r\n                \r\n            | C_false ->\r\n                ()\r\n                \r\n            | (C_not cond_cond) ->\r\n                make_cond cond_cond\r\n                \r\n            | C_compare (cond_expr_left, cond_compare_op, cond_expr_right) ->\r\n                make_expr cond_expr_left;\r\n                make_expr cond_expr_right;\r\n                if( (cond_expr_left.expr_type = Some TYPE_int || cond_expr_left.expr_type = Some TYPE_byte) && cond_expr_left.expr_type = cond_expr_right.expr_type )\r\n                then( () )\r\n                else( fatal \"Compare type mismatch\" )\r\n                \r\n            | C_logic (cond_cond_left, cond_logic_op, cond_cond_right) ->\r\n                make_cond cond_cond_left;\r\n                make_cond cond_cond_right\r\n    \r\n    (*check if parameter call is ok*)\r\n    and make_call func_call_ast =\r\n        let e = lookupEntry (id_make func_call_ast.call_id) LOOKUP_ALL_SCOPES true in\r\n        begin match e.entry_info with\r\n        | ENTRY_function func_entry ->\r\n            List.iter make_expr func_call_ast.call_expr;\r\n            \r\n            let get_param_typ param_entry = match param_entry.entry_info with \r\n                                        | ENTRY_parameter par -> (par.parameter_type,par.parameter_mode)\r\n                                        | _ -> fatal \"Parameter declaration gone wrong -- Why?\"; (TYPE_none,PASS_BY_VALUE)\r\n            in\r\n            let get_actual_param_typ expr_ = match expr_.expr_type with\r\n                                            | Some ex_type_some -> (ex_type_some,expr_.expr_raw)\r\n                                            | None -> fatal \"Sth gone terribly wrong\"; (TYPE_none,E_int 0)\r\n            in\r\n            \r\n            let declared_param_typ_lst = List.map get_param_typ func_entry.function_paramlist in\r\n            let actual_param_typ_lst = List.map get_actual_param_typ func_call_ast.call_expr in\r\n            \r\n            let equal_declared_actual (dec_type,dec_mode) (act_type,act_raw) = \r\n                match (dec_mode, act_raw) with\r\n                    | (PASS_BY_VALUE, _) -> equalType dec_type act_type\r\n                    | (PASS_BY_REFERENCE, E_val _) -> equalType dec_type act_type\r\n                    | _ -> false\r\n            in\r\n            \r\n            let myPrint_dec (s,info) =\r\n                pretty_typ std_formatter s;\r\n                match info with\r\n                    | PASS_BY_VALUE -> fprintf std_formatter \"[PASS_BY_VALUE] \"\r\n                    | PASS_BY_REFERENCE -> fprintf std_formatter \"[PASS_BY_REFERENCE] \"\r\n            in\r\n            \r\n            let myPrint_act (s,info) =\r\n                pretty_typ std_formatter s;\r\n                match info with\r\n                    | E_val _ -> fprintf std_formatter \"[L_value] \"\r\n                    | _ -> fprintf std_formatter \"[NOT_L_value] \"\r\n            in\r\n\r\n            if( ( List.length declared_param_typ_lst = List.length actual_param_typ_lst ) && \r\n                ( List.for_all2 equal_declared_actual declared_param_typ_lst actual_param_typ_lst )\r\n              )\r\n            \r\n            then( func_call_ast.return_type <- Some func_entry.function_result )\r\n            \r\n            else(\r\n                Printf.printf \"%s\" \"Expected parameters: \";\r\n                List.iter myPrint_dec declared_param_typ_lst;\r\n                print_newline ();\r\n                Printf.printf \"%s\" \"Given parameters:    \"; \r\n                List.iter myPrint_act actual_param_typ_lst;\r\n                print_newline ();\r\n                fatal \"Incorrect argument format\" \r\n            )\r\n            \r\n        | _ ->\r\n            fatal \"Call of a non-function\"\r\n        end\r\n    and make_expr expr_ast = \r\n        match expr_ast.expr_raw with\r\n            | E_int ex_int -> \r\n                expr_ast.expr_type <- Some TYPE_int\r\n                \r\n            | E_char ex_char -> \r\n                expr_ast.expr_type <- Some TYPE_byte\r\n                \r\n            | E_val ex_l_value ->\r\n                make_l_value ex_l_value;\r\n                expr_ast.expr_type <- ex_l_value.l_value_type\r\n                \r\n            | E_call ex_func_call ->\r\n                make_call ex_func_call;\r\n                expr_ast.expr_type <- ex_func_call.return_type\r\n                \r\n            | E_sign (ex_sign, ex_expr) ->\r\n                make_expr ex_expr;\r\n                if(ex_expr.expr_type = Some TYPE_int)\r\n                then(expr_ast.expr_type <- ex_expr.expr_type)\r\n                else(fatal \"Sign must be followed by an integer\")\r\n                \r\n            | E_op (ex_expr_left, ex_op, ex_expr_right) ->\r\n                make_expr ex_expr_left;\r\n                make_expr ex_expr_right;\r\n                \r\n                if((ex_expr_left.expr_type = Some TYPE_int || ex_expr_left.expr_type = Some TYPE_byte) && ex_expr_left.expr_type = ex_expr_right.expr_type)\r\n                then(expr_ast.expr_type <- ex_expr_left.expr_type)\r\n                else(fatal \"Type mismatch\")\r\n            \r\n    and make_l_value l_value_ast =\r\n        match l_value_ast.l_value_raw with\r\n            | L_exp (lval_id, lval_expr_opt) ->\r\n                let e = lookupEntry (id_make lval_id) LOOKUP_ALL_SCOPES true in\r\n                let e_typ = match e.entry_info with\r\n                    | ENTRY_variable var_info ->\r\n                        Some var_info.variable_type\r\n                    | ENTRY_parameter par_info ->\r\n                        Some par_info.parameter_type\r\n                    | _ -> \r\n                        fatal \"Identifier not valid\";\r\n                        None\r\n                in\r\n                begin match lval_expr_opt with\r\n                    | Some lval_expr_some -> \r\n                        (*Check if not array*)\r\n                        begin match e_typ with\r\n                            | Some (TYPE_array (elem_typ,_)) -> \r\n                                make_expr lval_expr_some;\r\n                                (*Check if index is int*)\r\n                                if( lval_expr_some.expr_type <> Some TYPE_int )\r\n                                then( fatal \"Array index must be an integer\" );\r\n                                l_value_ast.l_value_type <- Some elem_typ;\r\n                                (* Nesting *)\r\n                                l_value_ast.l_value_nesting_scope <- e.entry_scope.sco_nesting;\r\n                                \r\n                            | _ -> \r\n                                fatal \"Variable not an array\"\r\n                        end\r\n                    | None ->\r\n                        l_value_ast.l_value_type <- e_typ;\r\n                        (* Nesting *)\r\n                        l_value_ast.l_value_nesting_scope <- e.entry_scope.sco_nesting;\r\n                end\r\n            | L_str lval_str -> (*String literal = TYPE_array (TYPE_byte,size < 0)*)\r\n                l_value_ast.l_value_type <- Some TYPE_array (TYPE_byte,-1)\r\n    in\r\n    \r\n    let rec make_stmt stmt_ast = \r\n        match stmt_ast with\r\n            | Null_stmt -> \r\n                ()\r\n                \r\n            | S_assign (st_l_value, st_expr) ->\r\n                make_expr st_expr;\r\n                make_l_value st_l_value;\r\n                begin match (st_l_value.l_value_type, st_expr.expr_type) with\r\n                    | (Some TYPE_array (TYPE_byte,siz),_)   -> if( siz < 0 ) then ( fatal \"Cannot assign value to a string literal\" )\r\n                    | (Some TYPE_proc,_)                    -> fatal \"L value is a procedure -- How did this happen?\" (*Obsolete*)\r\n                    | (_,Some TYPE_proc)                    -> fatal \"Cannot assign a procedure\" (*Obsolete*)\r\n                    | (typ1,typ2)                           -> if(typ1 <> typ2)then(fatal \"Assignment type mismatch\")\r\n                end\r\n                \r\n            | S_comp st_stmt_lst ->\r\n                List.iter make_stmt st_stmt_lst\r\n                \r\n            | S_call st_func_call -> \r\n                make_call st_func_call\r\n                \r\n            | S_if (st_cond,st_stmt,st_stmt_opt) ->\r\n                make_cond st_cond;\r\n                make_stmt st_stmt;\r\n                begin match st_stmt_opt with\r\n                    | Some st_stmt_some -> \r\n                        make_stmt st_stmt_some\r\n                    | None -> \r\n                        ()\r\n                end\r\n                    \r\n            | S_while (st_cond,st_stmt) -> \r\n                make_cond st_cond;\r\n                make_stmt st_stmt\r\n                \r\n            | S_return st_expr_opt -> \r\n                let funTypeTop = Stack.pop funTypeStack in\r\n                begin match st_expr_opt with\r\n                    | Some st_expr_some ->\r\n                        Stack.push funTypeTop funTypeStack;\r\n                        if( funTypeTop = TYPE_proc )\r\n                        then( fatal \"Procedure cannot return a value\" )\r\n                        else( make_expr st_expr_some; if( st_expr_some.expr_type <> Some funTypeTop ) then ( fatal \"Return type mismatch\" ) )\r\n                    | None ->\r\n                        Stack.push funTypeTop funTypeStack;\r\n                        if( funTypeTop <> TYPE_proc )\r\n                        then( fatal \"Return statement cannot be empty here\" )\r\n                end        \r\n    in\r\n    \r\n    let make_par f par_ast =\r\n        match (par_ast.par_type,par_ast.par_pass_way) with\r\n            | (TYPE_array _, PASS_BY_VALUE) -> fatal \"An array cannot be passed by value\"\r\n            | _ -> ignore (newParameter (id_make par_ast.par_id) par_ast.par_type par_ast.par_pass_way f true); ()\r\n    in\r\n    \r\n    let rec make_local local_ast = \r\n        match local_ast with\r\n            | Local_func loc_func ->\r\n                make_func loc_func;\r\n                ()\r\n            | Local_var loc_var ->\r\n                (*In case an array is declared, its size needs to be a positive integer*)\r\n                begin match loc_var.var_type with\r\n                    | TYPE_array (_,siz)    -> if(siz <= 0)then(fatal \"Array size must be a positive integer\")\r\n                    | _                     -> ()\r\n                end;\r\n                ignore (newVariable (id_make loc_var.var_id) loc_var.var_type true);\r\n                ()\r\n                \r\n    and make_func f_ast =\r\n        \r\n        let f_SYM = newFunction (id_make f_ast.func_id) true in\r\n        Stack.push f_ast.func_ret_type funTypeStack;\r\n        (* Nesting *)\r\n        f_ast.func_nesting_scope <- f_SYM.entry_scope.sco_nesting;\r\n        \r\n        openScope ();\r\n        \r\n        List.iter (make_par f_SYM) f_ast.func_pars;\r\n        endFunctionHeader f_SYM f_ast.func_ret_type;\r\n        \r\n        List.iter make_local f_ast.func_local;\r\n        List.iter make_stmt f_ast.func_stmt;\r\n        \r\n        (* printSymbolTable (); *)\r\n        closeScope ();\r\n        ignore (Stack.pop funTypeStack);\r\n        ()\r\n    in\r\n    \r\n    initSymbolTable 256;\r\n    openScope ();\r\n    \r\n(********* add existing functions **********************************************************************************************************************)\r\n    \r\n(***************** writeInteger (n : int) : proc *******************************************************************************************************)\r\n    let f_wInt = newFunction (id_make \"writeInteger\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wInt {par_id = \"n\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n    endFunctionHeader f_wInt TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeByte (b : byte) : proc *********************************************************************************************************)\r\n    let f_wByte = newFunction (id_make \"writeByte\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wByte {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_wByte TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeChar (b : byte) : proc *********************************************************************************************************)\r\n    let f_wChar = newFunction (id_make \"writeChar\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wChar {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_wChar TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeString (s : reference byte []) : proc ******************************************************************************************)\r\n    let f_wStr = newFunction (id_make \"writeString\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wStr {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n    endFunctionHeader f_wStr TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readInteger () : int ****************************************************************************************************************)\r\n    let f_rInt = newFunction (id_make \"readInteger\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rInt TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readByte () : byte ******************************************************************************************************************)\r\n    let f_rByte = newFunction (id_make \"readByte\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rByte TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readChar () : byte ******************************************************************************************************************)\r\n    let f_rChar = newFunction (id_make \"readChar\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rChar TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readString (n : int, s : reference byte []) : proc **********************************************************************************)\r\n    let f_rStr = newFunction (id_make \"readString\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_rStr) [{par_id = \"n\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n                                 {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_rStr TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** extend (b : byte) : int *************************************************************************************************************)\r\n    let f_ext = newFunction(id_make \"extend\") true in\r\n    openScope ();\r\n    \r\n    make_par f_ext {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_ext TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** shrink (i : int) : byte *************************************************************************************************************)\r\n    let f_shrink = newFunction(id_make \"shrink\") true in\r\n    openScope ();\r\n    \r\n    make_par f_shrink {par_id = \"i\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n    endFunctionHeader f_shrink TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strlen (s : reference byte []) : int ************************************************************************************************)\r\n    let f_len = newFunction(id_make \"strlen\") true in\r\n    openScope ();\r\n    \r\n    make_par f_len {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n    endFunctionHeader f_len TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcmp (s1 : reference byte [], s2 : reference byte []) : int ***********************************************************************)\r\n    let f_cmp = newFunction (id_make \"strcmp\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cmp) [{par_id = \"s1\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"s2\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cmp TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcpy (trg : reference byte [], src : reference byte []) : proc ********************************************************************)\r\n    let f_cpy = newFunction (id_make \"strcpy\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cpy) [{par_id = \"trg\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"src\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cpy TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcat (trg : reference byte [], src : reference byte []) : proc ********************************************************************)\r\n    let f_cat = newFunction (id_make \"strcat\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cat) [{par_id = \"trg\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"src\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cat TYPE_proc;\r\n\r\n    closeScope ();\r\n    \r\n(********* end of existing functions *******************************************************************************************************************)\r\n\r\n    make_func tree;\r\n    \r\n    closeScope ();\r\n\r\n    (****** end of seman ******)"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml","version":2}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbol.ml","languageId":"ocaml","version":1,"text":"open Identifier\nopen Error\nopen Types\n\nmodule H = Hashtbl.Make (\n  struct\n    type t = id\n    let equal = (==)\n    let hash = Hashtbl.hash\n  end\n)\n\ntype pass_mode = PASS_BY_VALUE | PASS_BY_REFERENCE\n\ntype param_status =\n  | PARDEF_COMPLETE\n  | PARDEF_DEFINE\n  | PARDEF_CHECK\n\ntype scope = {\n  sco_parent : scope option;\n  sco_nesting : int;\n  mutable sco_entries : entry list;\n  mutable sco_negofs : int\n}\n\nand variable_info = {\n  variable_type   : Types.typ;\n  variable_offset : int\n}\n\nand function_info = {\n  mutable function_isForward : bool;\n  mutable function_paramlist : entry list;\n  mutable function_redeflist : entry list;\n  mutable function_result    : Types.typ;\n  mutable function_pstatus   : param_status;\n  mutable function_initquad  : int\n}\n\nand parameter_info = {\n  parameter_type           : Types.typ;\n  mutable parameter_offset : int;\n  parameter_mode           : pass_mode\n}\n\nand temporary_info = {\n  temporary_type   : Types.typ;\n  temporary_offset : int\n}\n\nand entry_info = ENTRY_none\n               | ENTRY_variable of variable_info\n               | ENTRY_function of function_info\n               | ENTRY_parameter of parameter_info\n               | ENTRY_temporary of temporary_info\n\nand entry = {\n  entry_id    : Identifier.id;\n  entry_scope : scope;\n  entry_info  : entry_info\n}\n\ntype lookup_type = LOOKUP_CURRENT_SCOPE | LOOKUP_ALL_SCOPES\n\nlet start_positive_offset = 8\nlet start_negative_offset = 0\n\nlet the_outer_scope = {\n  sco_parent = None;\n  sco_nesting = 0;\n  sco_entries = [];\n  sco_negofs = start_negative_offset\n}\n\nlet no_entry id = {\n  entry_id = id;\n  entry_scope = the_outer_scope;\n  entry_info = ENTRY_none\n}\n\nlet currentScope = ref the_outer_scope\nlet quadNext = ref 1\nlet tempNumber = ref 1\n\nlet tab = ref (H.create 0)\n\nlet initSymbolTable size =\n   tab := H.create size;\n   currentScope := the_outer_scope\n\nlet openScope () =\n  let sco = {\n    sco_parent = Some !currentScope;\n    sco_nesting = !currentScope.sco_nesting + 1;\n    sco_entries = [];\n    sco_negofs = start_negative_offset\n  } in\n  currentScope := sco\n\nlet closeScope () =\n  let sco = !currentScope in\n  let manyentry e = H.remove !tab e.entry_id in\n  List.iter manyentry sco.sco_entries;\n  match sco.sco_parent with\n  | Some scp ->\n      currentScope := scp\n  | None ->\n      internal \"cannot close the outer scope!\"\n\nexception Failure_NewEntry of entry\n\nlet newEntry id inf err =\n  try\n    if err then begin\n      try\n        let e = H.find !tab id in\n        if e.entry_scope.sco_nesting = !currentScope.sco_nesting then\n           raise (Failure_NewEntry e)\n      with Not_found ->\n        ()\n    end;\n    let e = {\n      entry_id = id;\n      entry_scope = !currentScope;\n      entry_info = inf\n    } in\n    H.add !tab id e;\n    !currentScope.sco_entries <- e :: !currentScope.sco_entries;\n    e\n  with Failure_NewEntry e ->\n    error \"duplicate identifier %a\" pretty_id id;\n    e\n\nlet lookupEntry id how err =\n  let scc = !currentScope in\n  let lookup () =\n    match how with\n    | LOOKUP_CURRENT_SCOPE ->\n        let e = H.find !tab id in\n        if e.entry_scope.sco_nesting = scc.sco_nesting then\n          e\n        else\n          raise Not_found\n    | LOOKUP_ALL_SCOPES ->\n        H.find !tab id in\n  if err then\n    try\n      lookup ()\n    with Not_found ->\n      error \"unknown identifier %a (first occurrence)\"\n        pretty_id id;\n      (* put it in, so we don't see more errors *)\n      H.add !tab id (no_entry id);\n      raise Exit\n  else\n    lookup ()\n\nlet newVariable id typ err =\n  !currentScope.sco_negofs <- !currentScope.sco_negofs + 1;\n  let inf = {\n    variable_type = typ;\n    variable_offset = !currentScope.sco_negofs\n  } in\n  newEntry id (ENTRY_variable inf) err\n\nlet newFunction id err =\n  try\n    let e = lookupEntry id LOOKUP_CURRENT_SCOPE false in\n    match e.entry_info with\n    | ENTRY_function inf when inf.function_isForward ->\n        inf.function_isForward <- false;\n        inf.function_pstatus <- PARDEF_CHECK;\n        inf.function_redeflist <- inf.function_paramlist;\n        e\n    | _ ->\n        if err then\n          error \"duplicate identifier: %a\" pretty_id id;\n          raise Exit\n  with Not_found ->\n    let inf = {\n      function_isForward = false;\n      function_paramlist = [];\n      function_redeflist = [];\n      function_result = TYPE_none;\n      function_pstatus = PARDEF_DEFINE;\n      function_initquad = 0\n    } in\n    newEntry id (ENTRY_function inf) false\n\nlet newParameter id typ mode f err =\n  match f.entry_info with\n  | ENTRY_function inf -> begin\n      match inf.function_pstatus with\n      | PARDEF_DEFINE ->\n          let inf_p = {\n            parameter_type = typ;\n            parameter_offset = 0;\n            parameter_mode = mode\n          } in\n          let e = newEntry id (ENTRY_parameter inf_p) err in\n          inf.function_paramlist <- e :: inf.function_paramlist;\n          e\n      | PARDEF_CHECK -> begin\n          match inf.function_redeflist with\n          | p :: ps -> begin\n              inf.function_redeflist <- ps;\n              match p.entry_info with\n              | ENTRY_parameter inf ->\n                  if not (equalType inf.parameter_type typ) then\n                    error \"Parameter type mismatch in redeclaration \\\n                           of function %a\" pretty_id f.entry_id\n                  else if inf.parameter_mode != mode then\n                    error \"Parameter passing mode mismatch in redeclaration \\\n                           of function %a\" pretty_id f.entry_id\n                  else if p.entry_id != id then\n                    error \"Parameter name mismatch in redeclaration \\\n                           of function %a\" pretty_id f.entry_id\n                  else\n                    H.add !tab id p;\n                  p\n              | _ ->\n                  internal \"I found a parameter that is not a parameter!\";\n                  raise Exit\n            end\n          | [] ->\n              error \"More parameters than expected in redeclaration \\\n                     of function %a\" pretty_id f.entry_id;\n              raise Exit\n        end\n      | PARDEF_COMPLETE ->\n          internal \"Cannot add a parameter to an already defined function\";\n          raise Exit\n    end\n  | _ ->\n      internal \"Cannot add a parameter to a non-function\";\n      raise Exit\n\nlet newTemporary typ =\n  let id = id_make (\"$\" ^ string_of_int !tempNumber) in\n  !currentScope.sco_negofs <- !currentScope.sco_negofs - sizeOfType typ;\n  let inf = {\n    temporary_type = typ;\n    temporary_offset = !currentScope.sco_negofs\n  } in\n  incr tempNumber;\n  newEntry id (ENTRY_temporary inf) false\n\nlet forwardFunction e =\n  match e.entry_info with\n  | ENTRY_function inf ->\n      inf.function_isForward <- true\n  | _ ->\n      internal \"Cannot make a non-function forward\"\n\nlet endFunctionHeader e typ =\n  match e.entry_info with\n  | ENTRY_function inf ->\n      begin\n        match inf.function_pstatus with\n        | PARDEF_COMPLETE ->\n            internal \"Cannot end parameters in an already defined function\"\n        | PARDEF_DEFINE ->\n            inf.function_result <- typ;\n            let fix_offset e =\n              match e.entry_info with\n              | ENTRY_parameter inf ->\n                  inf.parameter_offset <- e.entry_scope.sco_negofs + 1;\n                  e.entry_scope.sco_negofs <- e.entry_scope.sco_negofs + 1\n              | _ ->\n                  internal \"Cannot fix offset to a non parameter\" in\n            List.iter fix_offset inf.function_paramlist;\n            inf.function_paramlist <- List.rev inf.function_paramlist\n        | PARDEF_CHECK ->\n            if inf.function_redeflist <> [] then\n              error \"Fewer parameters than expected in redeclaration \\\n                     of function %a\" pretty_id e.entry_id;\n            if not (equalType inf.function_result typ) then\n              error \"Result type mismatch in redeclaration of function %a\"\n                    pretty_id e.entry_id;\n      end;\n      inf.function_pstatus <- PARDEF_COMPLETE\n  | _ ->\n      internal \"Cannot end parameters in a non-function\"\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbol.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 131, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbol.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00190734863281ms
Sending response {"id": 132, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbol.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 133, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbol.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbtest.ml","languageId":"ocaml","version":1,"text":"open Format\n\nopen Identifier\nopen Types\nopen Symbol\n\nlet show_offsets = true\n\nlet rec pretty_typ ppf typ =\n  match typ with\n  | TYPE_none ->\n      fprintf ppf \"<undefined>\"\n  | TYPE_int ->\n      fprintf ppf \"int\"\n  | TYPE_byte ->\n      fprintf ppf \"byte\"\n  | TYPE_array (et, sz) ->\n      pretty_typ ppf et;\n      if sz > 0 then\n        fprintf ppf \" [%d]\" sz\n      else\n        fprintf ppf \" []\"\n  | TYPE_proc ->\n      fprintf ppf \"proc\"\n\nlet pretty_mode ppf mode =\n  match mode with\n  | PASS_BY_REFERENCE ->\n      fprintf ppf \"reference \"\n  | _ ->\n      ()\n\nlet printSymbolTable () =\n  let rec walk ppf scp =\n    if scp.sco_nesting <> 0 then begin\n      fprintf ppf \"scope: \";\n      let entry ppf e =\n        fprintf ppf \"%a\" pretty_id e.entry_id;\n        match e.entry_info with\n        | ENTRY_none ->\n            fprintf ppf \"<none>\"\n        | ENTRY_variable inf ->\n            if show_offsets then\n              fprintf ppf \"[%d]\" inf.variable_offset\n        | ENTRY_function inf ->\n            let param ppf e =\n              match e.entry_info with\n                | ENTRY_parameter inf ->\n                   fprintf ppf \"%a%a : %a\"\n                      pretty_mode inf.parameter_mode\n                      pretty_id e.entry_id\n                      pretty_typ inf.parameter_type\n                | _ ->\n                    fprintf ppf \"<invalid>\" in\n            let rec params ppf ps =\n              match ps with\n              | [p] ->\n                  fprintf ppf \"%a\" param p\n              | p :: ps ->\n                  fprintf ppf \"%a; %a\" param p params ps;\n              | [] ->\n                  () in\n            fprintf ppf \"(%a) : %a\"\n              params inf.function_paramlist\n              pretty_typ inf.function_result\n        | ENTRY_parameter inf ->\n            if show_offsets then\n              fprintf ppf \"[%d]\" inf.parameter_offset\n        | ENTRY_temporary inf ->\n            if show_offsets then\n              fprintf ppf \"[%d]\" inf.temporary_offset in\n      let rec entries ppf es =\n        match es with\n          | [e] ->\n              fprintf ppf \"%a\" entry e\n          | e :: es ->\n              fprintf ppf \"%a, %a\" entry e entries es;\n          | [] ->\n              () in\n      match scp.sco_parent with\n      | Some scpar ->\n          fprintf ppf \"%a\\n%a\"\n            entries scp.sco_entries\n            walk scpar\n      | None ->\n          fprintf ppf \"<impossible>\\n\"\n    end in\n  let scope ppf scp =\n    if scp.sco_nesting == 0 then\n      fprintf ppf \"no scope\\n\"\n    else\n      walk ppf scp in\n  printf \"%a----------------------------------------\\n\"\n    scope !currentScope\n\n(* ����� ��������� ��������� ��� ������ �������� *)\n\n(* ��������� � ������� ���� ������������ Alan ��� ���������������\n   ��� ��� ������ ��� ������ ��������.\n\n   p () : proc -- this is the program header\n\n   s1 : byte; s2 : byte; s3 : byte;\n   i1 : int; i2 : int;\n\n   pr (p1 : int, p2 : int, p3 : reference byte) : proc\n   b1 : byte;\n   i1 : int;\n   { -- of procedure pr\n          -- access s1, i2, i1\n          -- make 2 new temporaries\n   } -- of procedure pr\n\n   f (x : int; reference y : byte) : int\n   { -- of function f\n          -- ... whatever ...\n   } -- of function f\n\n   { -- of program p\n          -- make 2 new temporaries\n   } -- of program p\n*)\n\nlet main =\n\n   initSymbolTable 256;\n\n   printSymbolTable ();\n\n   (* SOURCE : p () : proc -- this is the program header *)\n\n   openScope ();\n\n   printSymbolTable ();\n\n   (* SOURCE : s1 : byte; s2 : byte; s3 : byte; *)\n\n   let s1 = newVariable (id_make \"s1\") TYPE_byte true in\n   let s2 = newVariable (id_make \"s2\") TYPE_byte true in\n   let s3 = newVariable (id_make \"s3\") TYPE_byte true in\n   ignore s1; ignore s2; ignore s3;\n\n   printSymbolTable ();\n\n   (* SOURCE : i1 : int; i2 : int; *)\n\n   let i1 = newVariable (id_make \"i1\") TYPE_int true in\n   let i2 = newVariable (id_make \"i2\") TYPE_int true in\n   ignore i1; ignore i2;\n\n   printSymbolTable ();\n\n   (* SOURCE : pr (... *)\n\n   let p = newFunction (id_make \"pr\") true in\n   openScope ();\n\n   printSymbolTable ();\n\n   (* SOURCE : p1 : int, p2 : int, p3 : reference byte) : proc *)\n\n   let p1 = newParameter (id_make \"p1\") TYPE_int PASS_BY_VALUE p true in\n   let p2 = newParameter (id_make \"p2\") TYPE_int PASS_BY_VALUE p true in\n   let p3 = newParameter (id_make \"p3\") TYPE_byte PASS_BY_REFERENCE p true in\n   endFunctionHeader p TYPE_proc;\n   ignore p1; ignore p2; ignore p3;\n\n   printSymbolTable ();\n\n   (* SOURCE : b1 : byte; *)\n\n   let b1 = newVariable (id_make \"b1\") TYPE_byte true in\n   ignore b1;\n\n   (* SOURCE : i1 : int; *)\n\n   let i1 = newVariable (id_make \"i1\") TYPE_int true in\n   ignore i1;\n\n   printSymbolTable ();\n\n   (* SOURCE : (* access s1, i2, i1 *) *)\n\n   let s1 = lookupEntry (id_make \"s1\") LOOKUP_ALL_SCOPES true in\n   let i2 = lookupEntry (id_make \"i2\") LOOKUP_ALL_SCOPES true in\n   let i1 = lookupEntry (id_make \"i1\") LOOKUP_ALL_SCOPES true in\n   ignore s1; ignore i2; ignore i1;\n\n   (* SOURCE : (* make 2 new temporaries *) *)\n\n   let t1 = newTemporary TYPE_int in\n   let t2 = newTemporary TYPE_byte in\n   ignore t1; ignore t2;\n\n   printSymbolTable ();\n\n   (* SOURCE : } -- of procedure pr *)\n\n   closeScope ();\n\n   printSymbolTable ();\n\n   (* SOURCE : f (... *)\n\n   let p = newFunction (id_make \"f\") true in\n   openScope ();\n\n   printSymbolTable ();\n\n   (* SOURCE : x : int; reference y : byte) : int *)\n\n   let x = newParameter (id_make \"x\") TYPE_int PASS_BY_VALUE p true in\n   let y = newParameter (id_make \"y\") TYPE_byte PASS_BY_REFERENCE p true in\n   endFunctionHeader p TYPE_int;\n   ignore x; ignore y;\n\n   printSymbolTable ();\n\n   (* SOURCE : } -- of procedure f *)\n\n   closeScope ();\n\n   printSymbolTable ();\n\n   (* SOURCE : (* make 2 new temporaries *) *)\n\n   let t1 = newTemporary TYPE_int in\n   let t2 = newTemporary TYPE_int in\n   ignore t1; ignore t2;\n\n   printSymbolTable ();\n\n   (* SOURCE : } -- of program p *)\n\n   closeScope ();\n\n   printSymbolTable ()\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbtest.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 134, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbtest.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 135, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbtest.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 136, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbtest.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbol.ml","languageId":"ocaml","version":1,"text":"open Identifier\nopen Error\nopen Types\n\nmodule H = Hashtbl.Make (\n  struct\n    type t = id\n    let equal = (==)\n    let hash = Hashtbl.hash\n  end\n)\n\ntype pass_mode = PASS_BY_VALUE | PASS_BY_REFERENCE\n\ntype param_status =\n  | PARDEF_COMPLETE\n  | PARDEF_DEFINE\n  | PARDEF_CHECK\n\ntype scope = {\n  sco_parent : scope option;\n  sco_nesting : int;\n  mutable sco_entries : entry list;\n  mutable sco_negofs : int\n}\n\nand variable_info = {\n  variable_type   : Types.typ;\n  variable_offset : int\n}\n\nand function_info = {\n  mutable function_isForward : bool;\n  mutable function_paramlist : entry list;\n  mutable function_redeflist : entry list;\n  mutable function_result    : Types.typ;\n  mutable function_pstatus   : param_status;\n  mutable function_initquad  : int\n}\n\nand parameter_info = {\n  parameter_type           : Types.typ;\n  mutable parameter_offset : int;\n  parameter_mode           : pass_mode\n}\n\nand temporary_info = {\n  temporary_type   : Types.typ;\n  temporary_offset : int\n}\n\nand entry_info = ENTRY_none\n               | ENTRY_variable of variable_info\n               | ENTRY_function of function_info\n               | ENTRY_parameter of parameter_info\n               | ENTRY_temporary of temporary_info\n\nand entry = {\n  entry_id    : Identifier.id;\n  entry_scope : scope;\n  entry_info  : entry_info\n}\n\ntype lookup_type = LOOKUP_CURRENT_SCOPE | LOOKUP_ALL_SCOPES\n\nlet start_positive_offset = 8\nlet start_negative_offset = 0\n\nlet the_outer_scope = {\n  sco_parent = None;\n  sco_nesting = 0;\n  sco_entries = [];\n  sco_negofs = start_negative_offset\n}\n\nlet no_entry id = {\n  entry_id = id;\n  entry_scope = the_outer_scope;\n  entry_info = ENTRY_none\n}\n\nlet currentScope = ref the_outer_scope\nlet quadNext = ref 1\nlet tempNumber = ref 1\n\nlet tab = ref (H.create 0)\n\nlet initSymbolTable size =\n   tab := H.create size;\n   currentScope := the_outer_scope\n\nlet openScope () =\n  let sco = {\n    sco_parent = Some !currentScope;\n    sco_nesting = !currentScope.sco_nesting + 1;\n    sco_entries = [];\n    sco_negofs = start_negative_offset\n  } in\n  currentScope := sco\n\nlet closeScope () =\n  let sco = !currentScope in\n  let manyentry e = H.remove !tab e.entry_id in\n  List.iter manyentry sco.sco_entries;\n  match sco.sco_parent with\n  | Some scp ->\n      currentScope := scp\n  | None ->\n      internal \"cannot close the outer scope!\"\n\nexception Failure_NewEntry of entry\n\nlet newEntry id inf err =\n  try\n    if err then begin\n      try\n        let e = H.find !tab id in\n        if e.entry_scope.sco_nesting = !currentScope.sco_nesting then\n           raise (Failure_NewEntry e)\n      with Not_found ->\n        ()\n    end;\n    let e = {\n      entry_id = id;\n      entry_scope = !currentScope;\n      entry_info = inf\n    } in\n    H.add !tab id e;\n    !currentScope.sco_entries <- e :: !currentScope.sco_entries;\n    e\n  with Failure_NewEntry e ->\n    error \"duplicate identifier %a\" pretty_id id;\n    e\n\nlet lookupEntry id how err =\n  let scc = !currentScope in\n  let lookup () =\n    match how with\n    | LOOKUP_CURRENT_SCOPE ->\n        let e = H.find !tab id in\n        if e.entry_scope.sco_nesting = scc.sco_nesting then\n          e\n        else\n          raise Not_found\n    | LOOKUP_ALL_SCOPES ->\n        H.find !tab id in\n  if err then\n    try\n      lookup ()\n    with Not_found ->\n      error \"unknown identifier %a (first occurrence)\"\n        pretty_id id;\n      (* put it in, so we don't see more errors *)\n      H.add !tab id (no_entry id);\n      raise Exit\n  else\n    lookup ()\n\nlet newVariable id typ err =\n  !currentScope.sco_negofs <- !currentScope.sco_negofs + 1;\n  let inf = {\n    variable_type = typ;\n    variable_offset = !currentScope.sco_negofs\n  } in\n  newEntry id (ENTRY_variable inf) err\n\nlet newFunction id err =\n  try\n    let e = lookupEntry id LOOKUP_CURRENT_SCOPE false in\n    match e.entry_info with\n    | ENTRY_function inf when inf.function_isForward ->\n        inf.function_isForward <- false;\n        inf.function_pstatus <- PARDEF_CHECK;\n        inf.function_redeflist <- inf.function_paramlist;\n        e\n    | _ ->\n        if err then\n          error \"duplicate identifier: %a\" pretty_id id;\n          raise Exit\n  with Not_found ->\n    let inf = {\n      function_isForward = false;\n      function_paramlist = [];\n      function_redeflist = [];\n      function_result = TYPE_none;\n      function_pstatus = PARDEF_DEFINE;\n      function_initquad = 0\n    } in\n    newEntry id (ENTRY_function inf) false\n\nlet newParameter id typ mode f err =\n  match f.entry_info with\n  | ENTRY_function inf -> begin\n      match inf.function_pstatus with\n      | PARDEF_DEFINE ->\n          let inf_p = {\n            parameter_type = typ;\n            parameter_offset = 0;\n            parameter_mode = mode\n          } in\n          let e = newEntry id (ENTRY_parameter inf_p) err in\n          inf.function_paramlist <- e :: inf.function_paramlist;\n          e\n      | PARDEF_CHECK -> begin\n          match inf.function_redeflist with\n          | p :: ps -> begin\n              inf.function_redeflist <- ps;\n              match p.entry_info with\n              | ENTRY_parameter inf ->\n                  if not (equalType inf.parameter_type typ) then\n                    error \"Parameter type mismatch in redeclaration \\\n                           of function %a\" pretty_id f.entry_id\n                  else if inf.parameter_mode != mode then\n                    error \"Parameter passing mode mismatch in redeclaration \\\n                           of function %a\" pretty_id f.entry_id\n                  else if p.entry_id != id then\n                    error \"Parameter name mismatch in redeclaration \\\n                           of function %a\" pretty_id f.entry_id\n                  else\n                    H.add !tab id p;\n                  p\n              | _ ->\n                  internal \"I found a parameter that is not a parameter!\";\n                  raise Exit\n            end\n          | [] ->\n              error \"More parameters than expected in redeclaration \\\n                     of function %a\" pretty_id f.entry_id;\n              raise Exit\n        end\n      | PARDEF_COMPLETE ->\n          internal \"Cannot add a parameter to an already defined function\";\n          raise Exit\n    end\n  | _ ->\n      internal \"Cannot add a parameter to a non-function\";\n      raise Exit\n\nlet newTemporary typ =\n  let id = id_make (\"$\" ^ string_of_int !tempNumber) in\n  !currentScope.sco_negofs <- !currentScope.sco_negofs - sizeOfType typ;\n  let inf = {\n    temporary_type = typ;\n    temporary_offset = !currentScope.sco_negofs\n  } in\n  incr tempNumber;\n  newEntry id (ENTRY_temporary inf) false\n\nlet forwardFunction e =\n  match e.entry_info with\n  | ENTRY_function inf ->\n      inf.function_isForward <- true\n  | _ ->\n      internal \"Cannot make a non-function forward\"\n\nlet endFunctionHeader e typ =\n  match e.entry_info with\n  | ENTRY_function inf ->\n      begin\n        match inf.function_pstatus with\n        | PARDEF_COMPLETE ->\n            internal \"Cannot end parameters in an already defined function\"\n        | PARDEF_DEFINE ->\n            inf.function_result <- typ;\n            let fix_offset e =\n              match e.entry_info with\n              | ENTRY_parameter inf ->\n                  inf.parameter_offset <- e.entry_scope.sco_negofs + 1;\n                  e.entry_scope.sco_negofs <- e.entry_scope.sco_negofs + 1\n              | _ ->\n                  internal \"Cannot fix offset to a non parameter\" in\n            List.iter fix_offset inf.function_paramlist;\n            inf.function_paramlist <- List.rev inf.function_paramlist\n        | PARDEF_CHECK ->\n            if inf.function_redeflist <> [] then\n              error \"Fewer parameters than expected in redeclaration \\\n                     of function %a\" pretty_id e.entry_id;\n            if not (equalType inf.function_result typ) then\n              error \"Result type mismatch in redeclaration of function %a\"\n                    pretty_id e.entry_id;\n      end;\n      inf.function_pstatus <- PARDEF_COMPLETE\n  | _ ->\n      internal \"Cannot end parameters in a non-function\"\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbol.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbol.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00190734863281ms
Sending response {"id": 138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbol.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 139, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Symbol.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":9},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Sending response {"id": 140, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 142, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":4},"end":{"line":43,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":10},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 144, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":17},"end":{"line":43,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":10},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":10}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","languageId":"ocaml","version":1,"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\n\r\nlet frame_of_lltypes access_link par_lst locvar_lst = \r\n    let arr_of_lltypes = Array.of_list (access_link @ par_lst @ locvar_lst) in\r\n    struct_type context arr_of_lltypes\r\n\r\nlet give_lltype alan_type = exit 1\r\n    (* begin match alan_type with\r\n        | \r\n    end *)\r\n    \r\nlet rec codegen_func func_ast = \r\n    let ll_func_type = \r\n    define_function func_ast.func_id \r\n\r\n\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    -> \r\n            begin match er_op with\r\n                | Plus  -> build_add (codegen_expr er1) (codegen_expr er2) \"add\" builder\r\n                | Minus -> build_sub (codegen_expr er1) (codegen_expr er2) \"sub\" builder\r\n                | Mult  -> build_mul (codegen_expr er1) (codegen_expr er2) \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv (codegen_expr er1) (codegen_expr er2) \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv (codegen_expr er1) (codegen_expr er2) \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem (codegen_expr er1) (codegen_expr er2) \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem (codegen_expr er1) (codegen_expr er2) \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\nand codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 147, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00190734863281ms
Sending response {"id": 148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 149, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":23,"character":11},"end":{"line":23,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 150, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":23,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 151, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":23,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":24,"character":37}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 153, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":154,"method":"shutdown","params":null}
Sending response {"id": 154, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"exit","params":null}
Got exit! Terminating loop
Finished
