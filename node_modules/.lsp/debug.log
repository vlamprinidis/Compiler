Hello - from /home/vlassis/.vscode/extensions/jaredly.reason-vscode-1.7.5/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","languageId":"ocaml","version":1,"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            \r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","languageId":"ocaml","version":1,"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable func_parent : func option;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n    mutable par_frame_offset : int;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n    mutable locvar_frame_offset : int;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00214576721191ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":56,"character":69},"end":{"line":56,"character":69}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":46,"character":26},"end":{"line":46,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 5, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 6, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":56,"character":69},"end":{"line":56,"character":69}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":46,"character":26},"end":{"line":46,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":89,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":8,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":8,"character":44},"end":{"line":8,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":8,"character":53},"end":{"line":8,"character":53}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":110,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":110,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":110,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":93,"character":48}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":101,"character":53}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml","languageId":"ocaml","version":1,"text":"open Llvm\nopen Llvm_analysis\nopen Llvm_scalar_opts\nopen Llvm_ipo\nopen Llvm_vectorize\nopen Llvm_target\nopen Llvm.PassManager\nopen Ast\nopen Symbol\nopen Types\nopen Error\n\nlet context = global_context ()\nlet the_module = create_module context \"alan source file\"\nlet builder = builder context\nlet int_type = i64_type context\nlet char_type = i8_type context\nlet void_type = void_type context\nlet bool_type = i1_type context\n\nlet rec string_of_type x = match x with\n    | TYPE_none -> \"none\"\n    | TYPE_int -> \"int\"\n    | TYPE_byte -> \"byte\"\n    | TYPE_proc -> \"proc\"\n    | TYPE_array (y, _) -> \"array of \" ^ (string_of_type y)\n\nlet rec to_llvm_type x = match x with\n| TYPE_int -> int_type\n| TYPE_byte -> char_type\n| TYPE_array (t,n) -> array_type (to_llvm_type t) n\n| TYPE_proc -> void_type\n| _ -> internal \"Trying to get an invalid llvm type\"; raise Terminate\n\nlet param_to_llvm_type x = match x.pmode with\n    | PASS_BY_VALUE -> to_llvm_type x.ptype\n    | PASS_BY_REFERENCE ->\n    begin\n        match x.ptype with\n        | TYPE_array (t, n) -> pointer_type (to_llvm_type t)\n        | t -> pointer_type (to_llvm_type t)\n    end\n\nlet declare_lib () =\n    let declare_func name ret_type arg_l =\n        let ft = function_type ret_type (Array.of_list arg_l) in\n        ignore(declare_function name ft the_module)\n    in\n    declare_func \"writeInteger\" void_type [int_type];\n    declare_func \"writeChar\" void_type [char_type];\n    declare_func \"writeString\" void_type [pointer_type char_type];\n    declare_func \"readInteger\" int_type [];\n    declare_func \"readByter\" char_type [];\n    declare_func \"readChar\" char_type [];\n    declare_func \"readString\" void_type [int_type; pointer_type char_type];\n    declare_func \"strlen\" int_type [pointer_type char_type];\n    declare_func \"strcmp\" int_type [pointer_type char_type; pointer_type char_type];\n    declare_func \"strcpy\" void_type [pointer_type char_type; pointer_type char_type];\n    declare_func \"strcat\" void_type [pointer_type char_type; pointer_type char_type];\n\n    let extend_f =\n        let ft = function_type int_type [|char_type|] in\n        declare_function \"extend\" ft the_module\n    in\n    let bb = append_block context \"entry\" extend_f in\n    position_at_end bb builder;\n    let the_param = param extend_f 0 in\n    let ret_val = build_zext the_param int_type \"extend\" builder in\n    ignore(build_ret ret_val builder);\n\n    let shrink_f =\n        let ft = function_type char_type [|int_type|] in\n        declare_function \"shrink\" ft the_module\n    in\n    let bb = append_block context \"entry\" shrink_f in\n    position_at_end bb builder;\n    let the_param = param shrink_f 0 in\n    let ret_val = build_trunc the_param char_type \"shrink\" builder in\n    ignore(build_ret ret_val builder);\n\n    let writeByte_f =\n        let ft = function_type void_type [|char_type|] in\n        declare_function \"writeByte\" ft the_module\n    in\n    let bb = append_block context \"entry\" writeByte_f in\n    position_at_end bb builder;\n    let the_param = param writeByte_f 0 in\n    let ext_param = build_call extend_f [|the_param|] \"ext-wb\" builder in\n    let wi_f = match lookup_function \"writeInteger\" the_module with\n    | Some x -> x\n    | _ -> assert false\n    in\n    let _ret_val = build_call wi_f [|ext_param|] \"\" builder in\n    ignore(build_ret_void builder);\n\n    let readByte_f =\n        let ft = function_type char_type [||] in\n        declare_function \"readByte\" ft the_module\n    in\n    let bb = append_block context \"entry\" readByte_f in\n    position_at_end bb builder;\n    let ri_f = match lookup_function \"readInteger\" the_module with\n    | Some x -> x\n    | _ -> assert false\n    in\n    let the_int = build_call ri_f [||] \"\" builder in\n    let ret_val = build_call shrink_f [|the_int|] \"ri-shrink\" builder in\n    ignore(build_ret ret_val builder)\n\nlet rec add_ft ast =\n    let locals_list =\n        let g h tl = match h with\n        | VarDef x -> (to_llvm_type x.vtype) :: tl\n        | FuncDef _ -> tl\n        in List.fold_right g ast.def_list []\n    in\n    let param_list = List.map param_to_llvm_type ast.par_list in\n    let par_frame_ptr =\n        match ast.parent_func with\n        | Some par ->\n            let ft = begin match par.frame_t with\n            | Some x -> x\n            | None -> internal \"Trying to access a frame_t that isn't set yet\";\n                        raise Terminate\n            end in [ pointer_type ft ]\n        | None -> []\n    in\n    let ft_struct = named_struct_type context (\"ft_\" ^ ast.nested_name) in\n    ast.frame_t <- Some ft_struct;\n    let types_array = Array.of_list (List.concat [par_frame_ptr; param_list; locals_list]) in\n    struct_set_body ft_struct types_array false;\n    let h x = match x with\n    | FuncDef f -> add_ft f\n    | VarDef _ -> ()\n    in List.iter h ast.def_list\n\nlet to_icmp_type x = match x with\n    | Eq, _ -> Icmp.Eq\n    | Neq, _ -> Icmp.Ne\n    | Lt, TYPE_int -> Icmp.Slt\n    | Lte, TYPE_int -> Icmp.Sle\n    | Gt, TYPE_int -> Icmp.Sgt\n    | Gte, TYPE_int -> Icmp.Sge\n    | Lt, TYPE_byte -> Icmp.Ult\n    | Lte, TYPE_byte -> Icmp.Ule\n    | Gt, TYPE_byte -> Icmp.Ugt\n    | Gte, TYPE_byte -> Icmp.Uge\n    | _ -> internal \"Invalid compareOp, TYPE_ combination\";\n            raise Terminate\n\nlet rec get_fr_ptr fr_ptr x = match x with\n    | 0 -> fr_ptr\n    | n ->\n        let link_ptr = build_struct_gep fr_ptr 0 \"link_ptr\" builder in\n        let link = build_load link_ptr \"link\" builder in\n        get_fr_ptr link (n - 1)\n\nlet rec gen_fcall str frame f =\n    let gen_param frame (arg, is_byref) =\n        if (is_byref)  then\n            begin\n            let lval = match arg.kind with\n            | Lval x -> x\n            | _ -> internal \"Semantic analysis error (parameter passed by ref \\\n                                but is not an lvalue\"; raise Terminate\n            in match lval with\n            | Id lid -> gen_lval_id frame lid\n            | StringLit s ->\n                    let the_string = build_global_string s \"string-lit\" builder in\n                    build_struct_gep the_string 0 \"string_to_char_ptr\" builder\n            end\n        else gen_expr frame arg\n    in\n    let func = match lookup_function f.full_name the_module with\n    | Some x -> x\n    | None -> internal \"Semantic analysis error (calling undefined function)\";\n                raise Terminate\n    in\n    let expr_list =\n        if (Array.length (params func) = List.length f.fargs) then\n            List.map (gen_param frame) f.fargs\n        else\n            let nest_link = get_fr_ptr frame (f.fnest_diff + 1)\n            in nest_link::(List.map (gen_param frame) f.fargs)\n    in\n        let expr_array = Array.of_list expr_list in\n        build_call func expr_array str builder\n\nand gen_lval_id frame l =\n    let frame_ptr = get_fr_ptr frame l.nest_diff in\n    let elem_ptr = build_struct_gep frame_ptr l.offset \"elem_ptr\" builder in\n    let the_elem_ptr =\n        if (l.is_ptr) then build_load elem_ptr \"deref\" builder\n        else match l.ltype, l.ind with\n        | TYPE_array _, None | _, Some _ -> build_struct_gep elem_ptr 0 \"array_to_ptr\" builder\n        | _ -> elem_ptr\n    in\n    match l.ind with\n    | Some expr ->\n        let ind_expr = gen_expr frame expr in\n        build_gep the_elem_ptr [|ind_expr|] \"array_elem\" builder\n    | None  -> the_elem_ptr\n\n\nand gen_expr frame x = match x.kind with\n    | IntConst c -> const_int int_type c\n    | CharConst c -> const_int char_type (int_of_char c)\n    | Lval l ->\n        begin match l with\n        | Id l ->\n            let lval = gen_lval_id frame l in\n            build_load lval \"expr\" builder\n        | StringLit _ -> internal \"Trying to generate expression from string literal\";\n                            raise Terminate\n        end\n    | FuncCall f ->  gen_fcall \"ret_val\" frame f\n    | Pos p -> gen_expr frame p\n    | Neg n -> build_neg (gen_expr frame n) \"neg\" builder\n    | BinOp (expr1, op, expr2) ->\n        let expr_type = expr1.etype in\n        let expr1 = gen_expr frame expr1 in\n        let expr2 = gen_expr frame expr2 in\n        let build_fn, txt = begin match op, expr_type with\n        | Plus,_ -> build_add, \"add\"\n        | Minus,_ -> build_sub, \"sub\"\n        | Times,_ -> build_mul, \"mul\"\n        | Div,TYPE_int -> build_sdiv, \"sdiv\"\n        | Div,TYPE_byte -> build_udiv, \"udiv\"\n        | Mod,TYPE_int -> build_srem, \"srem\"\n        | Mod,TYPE_byte -> build_urem, \"urem\"\n        | _ -> internal \"Invalid binaryOp, TYPE_ combination\"; raise Terminate\n        end in build_fn expr1 expr2 txt builder\n\nlet rec gen_cond frame cond = match cond with\n    | True -> const_int bool_type 1\n    | False -> const_int bool_type 0\n    | Not ncond -> build_not (gen_cond frame ncond) \"not\" builder\n\n    | Compare (expr1, op, expr2) ->\n            let op_type = expr1.etype in\n            let expr1 = gen_expr frame expr1 in\n            let expr2 = gen_expr frame expr2 in\n            build_icmp (to_icmp_type (op, op_type)) expr1 expr2 \"cmp\" builder\n\n    | LogOp (cond1, op, cond2) ->\n            let cond1 = gen_cond frame cond1 in\n            let start_bb = insertion_block builder in\n            let the_function = block_parent start_bb in\n            let eval_sec_bb = append_block context \"second-cond\" the_function in\n            let merge_bb = append_block context \"merge\" the_function in\n            if (op = And) then ignore(build_cond_br cond1 eval_sec_bb merge_bb builder)\n            else ignore(build_cond_br cond1 merge_bb eval_sec_bb builder);\n\n            position_at_end eval_sec_bb builder;\n            let cond2 = gen_cond frame cond2 in\n            let new_eval_bb = insertion_block builder in\n            ignore(build_br merge_bb builder);\n\n            position_at_end merge_bb builder;\n            let inc_from_start = match op with\n            | Or -> const_int bool_type 1\n            | And -> const_int bool_type 0\n            in build_phi [(inc_from_start, start_bb);(cond2, new_eval_bb)] \"and-or_phi\" builder\n\nlet rec gen_stmt frame stmt = match stmt with\n    | Assign (lval, expr) ->\n            let lval = gen_lval_id frame lval in\n            let expr = gen_expr frame expr in\n            ignore(build_store expr lval builder)\n\n    | Compound stmt_list -> List.iter (gen_stmt frame) stmt_list\n\n    | VoidFuncCall f -> ignore(gen_fcall \"\" frame f)\n\n    | IfElse (cond, then_stmt, opt_else_stmt) ->\n            let cond_val = gen_cond frame cond in\n            let start_bb = insertion_block builder in\n            let the_function = block_parent start_bb in\n\n            let then_bb = append_block context \"then\" the_function in\n            let merge_bb = append_block context \"ifcont\" the_function in\n\n            position_at_end then_bb builder;\n            gen_stmt frame then_stmt;\n            begin match block_terminator (insertion_block builder) with\n            | None -> ignore(build_br merge_bb builder)\n            | Some _ -> ()\n            end;\n\n            begin match opt_else_stmt with\n            | Some else_stmt ->\n                let else_bb = append_block context \"else\" the_function in\n\n                position_at_end else_bb builder;\n                gen_stmt frame else_stmt;\n                begin match block_terminator (insertion_block builder) with\n                | None -> ignore(build_br merge_bb builder)\n                | Some _ -> ()\n                end;\n\n                position_at_end start_bb builder;\n                ignore(build_cond_br cond_val then_bb else_bb builder)\n\n            | None ->\n                position_at_end start_bb builder;\n                ignore(build_cond_br cond_val then_bb merge_bb builder)\n            end;\n\n            position_at_end merge_bb builder\n\n    | While (cond, stmt) ->\n            let start_bb = insertion_block builder in\n            let the_function = block_parent start_bb in\n            let cond_bb = append_block context \"loopcond\" the_function in\n            let loop_bb = append_block context \"loopbody\" the_function in\n            let merge_bb = append_block context \"loop_cont\" the_function in\n            ignore(build_br cond_bb builder);\n\n            position_at_end cond_bb builder;\n            let cond_val = gen_cond frame cond in\n            ignore(build_cond_br cond_val loop_bb merge_bb builder);\n\n            position_at_end loop_bb builder;\n            gen_stmt frame stmt;\n            begin match block_terminator (insertion_block builder) with\n            | None -> ignore(build_br cond_bb builder)\n            | Some _ -> ()\n            end;\n\n            position_at_end merge_bb builder\n\n    | Return (Some expr) ->\n            let ret_val = gen_expr frame expr in\n            ignore(build_ret ret_val builder)\n\n    | Return None -> ignore(build_ret_void builder)\n\n    | NOp -> ()\n\n\n\n\nlet rec gen_func f isOuter =\n    let helper x = match x with\n    | FuncDef f -> gen_func f false\n    | _ -> ()\n    in  List.iter helper f.def_list;\n    let param_list =\n        if isOuter\n            then (List.map param_to_llvm_type f.par_list)\n        else\n            let parent_f = match f.parent_func with\n            | Some x -> x\n            | None -> internal \"Trying to get parent function but pointer is not set\";\n                        raise Terminate\n            in let parent_ft = match parent_f.frame_t with\n            | Some x -> x\n            | None -> internal \"Trying to get parent's frame_t but pointer is not set\";\n                        raise Terminate\n            in (pointer_type parent_ft)::(List.map param_to_llvm_type f.par_list)\n    in\n    let param_array = Array.of_list param_list in\n    let ret_type = to_llvm_type f.ret_type in\n    let func_t = function_type ret_type param_array in\n    let func = match lookup_function f.nested_name the_module with\n        | None -> declare_function f.nested_name func_t the_module\n        | Some _ ->\n                internal \"Semantic analysis error (function %s already declared)\"\n                f.nested_name; raise Terminate\n    in\n    let bb = append_block context \"entry\" func in\n    position_at_end bb builder;\n    let frame_type = match f.frame_t with\n    | Some x -> x\n    | None -> internal \"Trying to get frame_t but pointer is not set\";\n                raise Terminate\n    in\n    let frame = build_alloca frame_type \"frame\" builder in\n    let i = ref 0 in\n    let store_param param =\n        let elem_ptr = build_struct_gep frame !i \"frame_elem\" builder in\n        ignore(build_store param elem_ptr builder); incr i;\n        in\n    iter_params store_param func;\n    List.iter (gen_stmt frame) f.comp_stmt;\n    begin match block_terminator (insertion_block builder) with\n    | None ->\n        begin match f.ret_type with\n        | TYPE_proc -> ignore(build_ret_void builder)\n        | TYPE_int -> ignore(build_ret (const_int int_type 0) builder)\n        | TYPE_byte -> ignore(build_ret (const_int char_type 0) builder)\n        | _ -> internal \"Function %s returns invalid type\" f.nested_name; raise Terminate\n        end\n    | Some _ -> () end;\n    if isOuter then begin\n        match lookup_function \"main\" the_module with\n        | Some _ -> ()\n        | None -> begin\n            let main_func = declare_function \"main\" func_t the_module in\n            let main_bb = append_block context \"entry\" main_func in\n            position_at_end main_bb builder;\n            if (return_type func_t != void_type) then begin\n                let res = build_call func (params main_func) \"main_call\" builder in\n                ignore(build_ret res builder)\n            end else begin\n                ignore(build_call func (params main_func) \"\" builder);\n                ignore(build_ret_void builder)\n            end\n        end\n    end\n\nlet add_opts pm =\n    let opts = [\n        add_ipsccp; add_memory_to_register_promotion; add_dead_arg_elimination;\n        add_instruction_combination; add_cfg_simplification;\n        add_function_inlining; add_function_attrs; add_scalar_repl_aggregation;\n        add_early_cse; add_cfg_simplification; add_instruction_combination;\n        add_tail_call_elimination; add_reassociation; add_loop_rotation;\n        add_loop_unswitch; add_instruction_combination; add_cfg_simplification;\n        add_ind_var_simplification; add_loop_idiom; add_loop_deletion;\n        add_loop_unroll; add_gvn; add_memcpy_opt; add_sccp; add_licm;\n        add_global_optimizer; add_global_dce;\n        add_aggressive_dce; add_cfg_simplification; add_instruction_combination;\n        add_dead_store_elimination; add_loop_vectorize; add_slp_vectorize;\n        add_strip_dead_prototypes; add_global_dce; add_constant_propagation;\n        add_cfg_simplification\n    ] in\n    List.iter (fun f -> f pm) opts\n\n\nlet irgen func do_opts =\n    Llvm_all_backends.initialize ();\n    let triple = Target.default_triple () in\n    set_target_triple triple the_module;\n    let target = Target.by_triple triple in\n    let machine = TargetMachine.create ~triple:triple target in\n    let dly = TargetMachine.data_layout machine in\n    set_data_layout (DataLayout.as_string dly) the_module;\n    declare_lib ();\n    add_ft func;\n    gen_func func true;\n    if (do_opts) then begin\n        let mpm = PassManager.create () in\n        add_opts mpm;\n        ignore(PassManager.run_module the_module mpm)\n    end;\n    assert_valid_module the_module\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00286102294922ms
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 20, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"}}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 23, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":2},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            i\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":163,"character":13},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":3},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ig\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 25, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":14},"end":{"line":163,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":4},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ign\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 28, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":15},"end":{"line":163,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":5},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            igno\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 31, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":6},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignor\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 32, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":17},"end":{"line":163,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":7},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 34, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":18},"end":{"line":163,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00977516174316ms
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":8},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore \r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 37, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":9},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore ()\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":163,"character":20}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00596046447754ms
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 40, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":20},"end":{"line":163,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":147,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":10},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (c)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":163,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":12},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (cod)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.02121925354ms
Sending response {"id": 45, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":23},"end":{"line":163,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":13},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (code)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 47, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":24},"end":{"line":163,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":14},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 50, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":32},"end":{"line":163,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":15},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call )\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 53, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":33},"end":{"line":163,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":140,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":140,"character":26},"end":{"line":140,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":17},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call fr call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call )\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 58, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":140,"character":28},"end":{"line":140,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":18},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call fra call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call )\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 61, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":140,"character":29},"end":{"line":140,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 62, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":20},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call )\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 64, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":140,"character":31},"end":{"line":140,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":140,"character":31},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0178813934326ms
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":21},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call )\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 68, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":140,"character":39},"end":{"line":140,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 69, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":134,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 71, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":140,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":140,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00715255737305ms
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":140,"character":26},"end":{"line":140,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 74, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":163,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0278949737549ms
Sending response {"id": 75, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":33},"end":{"line":163,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":169,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.018835067749ms
Sending response {"id": 77, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":169,"character":45}}}
[server] Got a method textDocument/definition
[server] processing took 0.0159740447998ms
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":22},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 79, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":46},"end":{"line":163,"character":46}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 80, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 81, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":23},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue )\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 82, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":47},"end":{"line":163,"character":47}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 84, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":24},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue f)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":163,"character":48},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":25},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fc)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 86, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":49},"end":{"line":163,"character":49}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":26},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fca)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 88, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":50},"end":{"line":163,"character":50}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 89, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":28},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 91, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":52},"end":{"line":163,"character":52}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0290870666504ms
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 93, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":28},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":28}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml","languageId":"ocaml","version":1,"text":"open Llvm\nopen Llvm_analysis\nopen Llvm_scalar_opts\nopen Llvm_ipo\nopen Llvm_vectorize\nopen Llvm_target\nopen Llvm.PassManager\nopen Ast\nopen Symbol\nopen Types\nopen Error\n\nlet context = global_context ()\nlet the_module = create_module context \"alan source file\"\nlet builder = builder context\nlet int_type = i64_type context\nlet char_type = i8_type context\nlet void_type = void_type context\nlet bool_type = i1_type context\n\nlet rec string_of_type x = match x with\n    | TYPE_none -> \"none\"\n    | TYPE_int -> \"int\"\n    | TYPE_byte -> \"byte\"\n    | TYPE_proc -> \"proc\"\n    | TYPE_array (y, _) -> \"array of \" ^ (string_of_type y)\n\nlet rec to_llvm_type x = match x with\n| TYPE_int -> int_type\n| TYPE_byte -> char_type\n| TYPE_array (t,n) -> array_type (to_llvm_type t) n\n| TYPE_proc -> void_type\n| _ -> internal \"Trying to get an invalid llvm type\"; raise Terminate\n\nlet param_to_llvm_type x = match x.pmode with\n    | PASS_BY_VALUE -> to_llvm_type x.ptype\n    | PASS_BY_REFERENCE ->\n    begin\n        match x.ptype with\n        | TYPE_array (t, n) -> pointer_type (to_llvm_type t)\n        | t -> pointer_type (to_llvm_type t)\n    end\n\nlet declare_lib () =\n    let declare_func name ret_type arg_l =\n        let ft = function_type ret_type (Array.of_list arg_l) in\n        ignore(declare_function name ft the_module)\n    in\n    declare_func \"writeInteger\" void_type [int_type];\n    declare_func \"writeChar\" void_type [char_type];\n    declare_func \"writeString\" void_type [pointer_type char_type];\n    declare_func \"readInteger\" int_type [];\n    declare_func \"readByter\" char_type [];\n    declare_func \"readChar\" char_type [];\n    declare_func \"readString\" void_type [int_type; pointer_type char_type];\n    declare_func \"strlen\" int_type [pointer_type char_type];\n    declare_func \"strcmp\" int_type [pointer_type char_type; pointer_type char_type];\n    declare_func \"strcpy\" void_type [pointer_type char_type; pointer_type char_type];\n    declare_func \"strcat\" void_type [pointer_type char_type; pointer_type char_type];\n\n    let extend_f =\n        let ft = function_type int_type [|char_type|] in\n        declare_function \"extend\" ft the_module\n    in\n    let bb = append_block context \"entry\" extend_f in\n    position_at_end bb builder;\n    let the_param = param extend_f 0 in\n    let ret_val = build_zext the_param int_type \"extend\" builder in\n    ignore(build_ret ret_val builder);\n\n    let shrink_f =\n        let ft = function_type char_type [|int_type|] in\n        declare_function \"shrink\" ft the_module\n    in\n    let bb = append_block context \"entry\" shrink_f in\n    position_at_end bb builder;\n    let the_param = param shrink_f 0 in\n    let ret_val = build_trunc the_param char_type \"shrink\" builder in\n    ignore(build_ret ret_val builder);\n\n    let writeByte_f =\n        let ft = function_type void_type [|char_type|] in\n        declare_function \"writeByte\" ft the_module\n    in\n    let bb = append_block context \"entry\" writeByte_f in\n    position_at_end bb builder;\n    let the_param = param writeByte_f 0 in\n    let ext_param = build_call extend_f [|the_param|] \"ext-wb\" builder in\n    let wi_f = match lookup_function \"writeInteger\" the_module with\n    | Some x -> x\n    | _ -> assert false\n    in\n    let _ret_val = build_call wi_f [|ext_param|] \"\" builder in\n    ignore(build_ret_void builder);\n\n    let readByte_f =\n        let ft = function_type char_type [||] in\n        declare_function \"readByte\" ft the_module\n    in\n    let bb = append_block context \"entry\" readByte_f in\n    position_at_end bb builder;\n    let ri_f = match lookup_function \"readInteger\" the_module with\n    | Some x -> x\n    | _ -> assert false\n    in\n    let the_int = build_call ri_f [||] \"\" builder in\n    let ret_val = build_call shrink_f [|the_int|] \"ri-shrink\" builder in\n    ignore(build_ret ret_val builder)\n\nlet rec add_ft ast =\n    let locals_list =\n        let g h tl = match h with\n        | VarDef x -> (to_llvm_type x.vtype) :: tl\n        | FuncDef _ -> tl\n        in List.fold_right g ast.def_list []\n    in\n    let param_list = List.map param_to_llvm_type ast.par_list in\n    let par_frame_ptr =\n        match ast.parent_func with\n        | Some par ->\n            let ft = begin match par.frame_t with\n            | Some x -> x\n            | None -> internal \"Trying to access a frame_t that isn't set yet\";\n                        raise Terminate\n            end in [ pointer_type ft ]\n        | None -> []\n    in\n    let ft_struct = named_struct_type context (\"ft_\" ^ ast.nested_name) in\n    ast.frame_t <- Some ft_struct;\n    let types_array = Array.of_list (List.concat [par_frame_ptr; param_list; locals_list]) in\n    struct_set_body ft_struct types_array false;\n    let h x = match x with\n    | FuncDef f -> add_ft f\n    | VarDef _ -> ()\n    in List.iter h ast.def_list\n\nlet to_icmp_type x = match x with\n    | Eq, _ -> Icmp.Eq\n    | Neq, _ -> Icmp.Ne\n    | Lt, TYPE_int -> Icmp.Slt\n    | Lte, TYPE_int -> Icmp.Sle\n    | Gt, TYPE_int -> Icmp.Sgt\n    | Gte, TYPE_int -> Icmp.Sge\n    | Lt, TYPE_byte -> Icmp.Ult\n    | Lte, TYPE_byte -> Icmp.Ule\n    | Gt, TYPE_byte -> Icmp.Ugt\n    | Gte, TYPE_byte -> Icmp.Uge\n    | _ -> internal \"Invalid compareOp, TYPE_ combination\";\n            raise Terminate\n\nlet rec get_fr_ptr fr_ptr x = match x with\n    | 0 -> fr_ptr\n    | n ->\n        let link_ptr = build_struct_gep fr_ptr 0 \"link_ptr\" builder in\n        let link = build_load link_ptr \"link\" builder in\n        get_fr_ptr link (n - 1)\n\nlet rec gen_fcall str frame f =\n    let gen_param frame (arg, is_byref) =\n        if (is_byref)  then\n            begin\n            let lval = match arg.kind with\n            | Lval x -> x\n            | _ -> internal \"Semantic analysis error (parameter passed by ref \\\n                                but is not an lvalue\"; raise Terminate\n            in match lval with\n            | Id lid -> gen_lval_id frame lid\n            | StringLit s ->\n                    let the_string = build_global_string s \"string-lit\" builder in\n                    build_struct_gep the_string 0 \"string_to_char_ptr\" builder\n            end\n        else gen_expr frame arg\n    in\n    let func = match lookup_function f.full_name the_module with\n    | Some x -> x\n    | None -> internal \"Semantic analysis error (calling undefined function)\";\n                raise Terminate\n    in\n    let expr_list =\n        if (Array.length (params func) = List.length f.fargs) then\n            List.map (gen_param frame) f.fargs\n        else\n            let nest_link = get_fr_ptr frame (f.fnest_diff + 1)\n            in nest_link::(List.map (gen_param frame) f.fargs)\n    in\n        let expr_array = Array.of_list expr_list in\n        build_call func expr_array str builder\n\nand gen_lval_id frame l =\n    let frame_ptr = get_fr_ptr frame l.nest_diff in\n    let elem_ptr = build_struct_gep frame_ptr l.offset \"elem_ptr\" builder in\n    let the_elem_ptr =\n        if (l.is_ptr) then build_load elem_ptr \"deref\" builder\n        else match l.ltype, l.ind with\n        | TYPE_array _, None | _, Some _ -> build_struct_gep elem_ptr 0 \"array_to_ptr\" builder\n        | _ -> elem_ptr\n    in\n    match l.ind with\n    | Some expr ->\n        let ind_expr = gen_expr frame expr in\n        build_gep the_elem_ptr [|ind_expr|] \"array_elem\" builder\n    | None  -> the_elem_ptr\n\n\nand gen_expr frame x = match x.kind with\n    | IntConst c -> const_int int_type c\n    | CharConst c -> const_int char_type (int_of_char c)\n    | Lval l ->\n        begin match l with\n        | Id l ->\n            let lval = gen_lval_id frame l in\n            build_load lval \"expr\" builder\n        | StringLit _ -> internal \"Trying to generate expression from string literal\";\n                            raise Terminate\n        end\n    | FuncCall f ->  gen_fcall \"ret_val\" frame f\n    | Pos p -> gen_expr frame p\n    | Neg n -> build_neg (gen_expr frame n) \"neg\" builder\n    | BinOp (expr1, op, expr2) ->\n        let expr_type = expr1.etype in\n        let expr1 = gen_expr frame expr1 in\n        let expr2 = gen_expr frame expr2 in\n        let build_fn, txt = begin match op, expr_type with\n        | Plus,_ -> build_add, \"add\"\n        | Minus,_ -> build_sub, \"sub\"\n        | Times,_ -> build_mul, \"mul\"\n        | Div,TYPE_int -> build_sdiv, \"sdiv\"\n        | Div,TYPE_byte -> build_udiv, \"udiv\"\n        | Mod,TYPE_int -> build_srem, \"srem\"\n        | Mod,TYPE_byte -> build_urem, \"urem\"\n        | _ -> internal \"Invalid binaryOp, TYPE_ combination\"; raise Terminate\n        end in build_fn expr1 expr2 txt builder\n\nlet rec gen_cond frame cond = match cond with\n    | True -> const_int bool_type 1\n    | False -> const_int bool_type 0\n    | Not ncond -> build_not (gen_cond frame ncond) \"not\" builder\n\n    | Compare (expr1, op, expr2) ->\n            let op_type = expr1.etype in\n            let expr1 = gen_expr frame expr1 in\n            let expr2 = gen_expr frame expr2 in\n            build_icmp (to_icmp_type (op, op_type)) expr1 expr2 \"cmp\" builder\n\n    | LogOp (cond1, op, cond2) ->\n            let cond1 = gen_cond frame cond1 in\n            let start_bb = insertion_block builder in\n            let the_function = block_parent start_bb in\n            let eval_sec_bb = append_block context \"second-cond\" the_function in\n            let merge_bb = append_block context \"merge\" the_function in\n            if (op = And) then ignore(build_cond_br cond1 eval_sec_bb merge_bb builder)\n            else ignore(build_cond_br cond1 merge_bb eval_sec_bb builder);\n\n            position_at_end eval_sec_bb builder;\n            let cond2 = gen_cond frame cond2 in\n            let new_eval_bb = insertion_block builder in\n            ignore(build_br merge_bb builder);\n\n            position_at_end merge_bb builder;\n            let inc_from_start = match op with\n            | Or -> const_int bool_type 1\n            | And -> const_int bool_type 0\n            in build_phi [(inc_from_start, start_bb);(cond2, new_eval_bb)] \"and-or_phi\" builder\n\nlet rec gen_stmt frame stmt = match stmt with\n    | Assign (lval, expr) ->\n            let lval = gen_lval_id frame lval in\n            let expr = gen_expr frame expr in\n            ignore(build_store expr lval builder)\n\n    | Compound stmt_list -> List.iter (gen_stmt frame) stmt_list\n\n    | VoidFuncCall f -> ignore(gen_fcall \"\" frame f)\n\n    | IfElse (cond, then_stmt, opt_else_stmt) ->\n            let cond_val = gen_cond frame cond in\n            let start_bb = insertion_block builder in\n            let the_function = block_parent start_bb in\n\n            let then_bb = append_block context \"then\" the_function in\n            let merge_bb = append_block context \"ifcont\" the_function in\n\n            position_at_end then_bb builder;\n            gen_stmt frame then_stmt;\n            begin match block_terminator (insertion_block builder) with\n            | None -> ignore(build_br merge_bb builder)\n            | Some _ -> ()\n            end;\n\n            begin match opt_else_stmt with\n            | Some else_stmt ->\n                let else_bb = append_block context \"else\" the_function in\n\n                position_at_end else_bb builder;\n                gen_stmt frame else_stmt;\n                begin match block_terminator (insertion_block builder) with\n                | None -> ignore(build_br merge_bb builder)\n                | Some _ -> ()\n                end;\n\n                position_at_end start_bb builder;\n                ignore(build_cond_br cond_val then_bb else_bb builder)\n\n            | None ->\n                position_at_end start_bb builder;\n                ignore(build_cond_br cond_val then_bb merge_bb builder)\n            end;\n\n            position_at_end merge_bb builder\n\n    | While (cond, stmt) ->\n            let start_bb = insertion_block builder in\n            let the_function = block_parent start_bb in\n            let cond_bb = append_block context \"loopcond\" the_function in\n            let loop_bb = append_block context \"loopbody\" the_function in\n            let merge_bb = append_block context \"loop_cont\" the_function in\n            ignore(build_br cond_bb builder);\n\n            position_at_end cond_bb builder;\n            let cond_val = gen_cond frame cond in\n            ignore(build_cond_br cond_val loop_bb merge_bb builder);\n\n            position_at_end loop_bb builder;\n            gen_stmt frame stmt;\n            begin match block_terminator (insertion_block builder) with\n            | None -> ignore(build_br cond_bb builder)\n            | Some _ -> ()\n            end;\n\n            position_at_end merge_bb builder\n\n    | Return (Some expr) ->\n            let ret_val = gen_expr frame expr in\n            ignore(build_ret ret_val builder)\n\n    | Return None -> ignore(build_ret_void builder)\n\n    | NOp -> ()\n\n\n\n\nlet rec gen_func f isOuter =\n    let helper x = match x with\n    | FuncDef f -> gen_func f false\n    | _ -> ()\n    in  List.iter helper f.def_list;\n    let param_list =\n        if isOuter\n            then (List.map param_to_llvm_type f.par_list)\n        else\n            let parent_f = match f.parent_func with\n            | Some x -> x\n            | None -> internal \"Trying to get parent function but pointer is not set\";\n                        raise Terminate\n            in let parent_ft = match parent_f.frame_t with\n            | Some x -> x\n            | None -> internal \"Trying to get parent's frame_t but pointer is not set\";\n                        raise Terminate\n            in (pointer_type parent_ft)::(List.map param_to_llvm_type f.par_list)\n    in\n    let param_array = Array.of_list param_list in\n    let ret_type = to_llvm_type f.ret_type in\n    let func_t = function_type ret_type param_array in\n    let func = match lookup_function f.nested_name the_module with\n        | None -> declare_function f.nested_name func_t the_module\n        | Some _ ->\n                internal \"Semantic analysis error (function %s already declared)\"\n                f.nested_name; raise Terminate\n    in\n    let bb = append_block context \"entry\" func in\n    position_at_end bb builder;\n    let frame_type = match f.frame_t with\n    | Some x -> x\n    | None -> internal \"Trying to get frame_t but pointer is not set\";\n                raise Terminate\n    in\n    let frame = build_alloca frame_type \"frame\" builder in\n    let i = ref 0 in\n    let store_param param =\n        let elem_ptr = build_struct_gep frame !i \"frame_elem\" builder in\n        ignore(build_store param elem_ptr builder); incr i;\n        in\n    iter_params store_param func;\n    List.iter (gen_stmt frame) f.comp_stmt;\n    begin match block_terminator (insertion_block builder) with\n    | None ->\n        begin match f.ret_type with\n        | TYPE_proc -> ignore(build_ret_void builder)\n        | TYPE_int -> ignore(build_ret (const_int int_type 0) builder)\n        | TYPE_byte -> ignore(build_ret (const_int char_type 0) builder)\n        | _ -> internal \"Function %s returns invalid type\" f.nested_name; raise Terminate\n        end\n    | Some _ -> () end;\n    if isOuter then begin\n        match lookup_function \"main\" the_module with\n        | Some _ -> ()\n        | None -> begin\n            let main_func = declare_function \"main\" func_t the_module in\n            let main_bb = append_block context \"entry\" main_func in\n            position_at_end main_bb builder;\n            if (return_type func_t != void_type) then begin\n                let res = build_call func (params main_func) \"main_call\" builder in\n                ignore(build_ret res builder)\n            end else begin\n                ignore(build_call func (params main_func) \"\" builder);\n                ignore(build_ret_void builder)\n            end\n        end\n    end\n\nlet add_opts pm =\n    let opts = [\n        add_ipsccp; add_memory_to_register_promotion; add_dead_arg_elimination;\n        add_instruction_combination; add_cfg_simplification;\n        add_function_inlining; add_function_attrs; add_scalar_repl_aggregation;\n        add_early_cse; add_cfg_simplification; add_instruction_combination;\n        add_tail_call_elimination; add_reassociation; add_loop_rotation;\n        add_loop_unswitch; add_instruction_combination; add_cfg_simplification;\n        add_ind_var_simplification; add_loop_idiom; add_loop_deletion;\n        add_loop_unroll; add_gvn; add_memcpy_opt; add_sccp; add_licm;\n        add_global_optimizer; add_global_dce;\n        add_aggressive_dce; add_cfg_simplification; add_instruction_combination;\n        add_dead_store_elimination; add_loop_vectorize; add_slp_vectorize;\n        add_strip_dead_prototypes; add_global_dce; add_constant_propagation;\n        add_cfg_simplification\n    ] in\n    List.iter (fun f -> f pm) opts\n\n\nlet irgen func do_opts =\n    Llvm_all_backends.initialize ();\n    let triple = Target.default_triple () in\n    set_target_triple triple the_module;\n    let target = Target.by_triple triple in\n    let machine = TargetMachine.create ~triple:triple target in\n    let dly = TargetMachine.data_layout machine in\n    set_data_layout (DataLayout.as_string dly) the_module;\n    declare_lib ();\n    add_ft func;\n    gen_func func true;\n    if (do_opts) then begin\n        let mpm = PassManager.create () in\n        add_opts mpm;\n        ignore(PassManager.run_module the_module mpm)\n    end;\n    assert_valid_module the_module\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00619888305664ms
Sending response {"id": 95, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 96, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 97, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 98, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 99, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":163,"character":52},"end":{"line":163,"character":52}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 100, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":163,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":162,"character":68},"end":{"line":162,"character":68}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":251,"character":54}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":251,"character":54},"end":{"line":251,"character":54}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":252,"character":54}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":246,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":246,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":246,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":246,"character":21},"end":{"line":246,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":250,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00786781311035ms
Sending response {"id": 110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":250,"character":53},"end":{"line":250,"character":53}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 111, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":250,"character":51}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":250,"character":51}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":250,"character":51},"end":{"line":250,"character":51}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":29},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval  v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 115, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 116, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":30},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 117, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":250,"character":65},"end":{"line":250,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":251,"character":51}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 120, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":251,"character":51}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":251,"character":51}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 122, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":251,"character":51},"end":{"line":251,"character":51}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":31},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call  cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 124, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":32},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 125, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":251,"character":65},"end":{"line":251,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":252,"character":59}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":32},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":32}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 130, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 131, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"},"position":{"line":267,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0472068786621ms
Sending response {"id": 132, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"},"position":{"line":266,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"},"position":{"line":266,"character":32}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 134, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"},"range":{"start":{"line":266,"character":23},"end":{"line":266,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 135, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"}}}
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 136, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 138, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":251,"character":65},"end":{"line":251,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 139, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":168,"character":68}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 140, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml","languageId":"ocaml","version":1,"text":"open Llvm\nopen Llvm_analysis\nopen Llvm_scalar_opts\nopen Llvm_ipo\nopen Llvm_vectorize\nopen Llvm_target\nopen Llvm.PassManager\nopen Ast\nopen Symbol\nopen Types\nopen Error\n\nlet context = global_context ()\nlet the_module = create_module context \"alan source file\"\nlet builder = builder context\nlet int_type = i64_type context\nlet char_type = i8_type context\nlet void_type = void_type context\nlet bool_type = i1_type context\n\nlet rec string_of_type x = match x with\n    | TYPE_none -> \"none\"\n    | TYPE_int -> \"int\"\n    | TYPE_byte -> \"byte\"\n    | TYPE_proc -> \"proc\"\n    | TYPE_array (y, _) -> \"array of \" ^ (string_of_type y)\n\nlet rec to_llvm_type x = match x with\n| TYPE_int -> int_type\n| TYPE_byte -> char_type\n| TYPE_array (t,n) -> array_type (to_llvm_type t) n\n| TYPE_proc -> void_type\n| _ -> internal \"Trying to get an invalid llvm type\"; raise Terminate\n\nlet param_to_llvm_type x = match x.pmode with\n    | PASS_BY_VALUE -> to_llvm_type x.ptype\n    | PASS_BY_REFERENCE ->\n    begin\n        match x.ptype with\n        | TYPE_array (t, n) -> pointer_type (to_llvm_type t)\n        | t -> pointer_type (to_llvm_type t)\n    end\n\nlet declare_lib () =\n    let declare_func name ret_type arg_l =\n        let ft = function_type ret_type (Array.of_list arg_l) in\n        ignore(declare_function name ft the_module)\n    in\n    declare_func \"writeInteger\" void_type [int_type];\n    declare_func \"writeChar\" void_type [char_type];\n    declare_func \"writeString\" void_type [pointer_type char_type];\n    declare_func \"readInteger\" int_type [];\n    declare_func \"readByter\" char_type [];\n    declare_func \"readChar\" char_type [];\n    declare_func \"readString\" void_type [int_type; pointer_type char_type];\n    declare_func \"strlen\" int_type [pointer_type char_type];\n    declare_func \"strcmp\" int_type [pointer_type char_type; pointer_type char_type];\n    declare_func \"strcpy\" void_type [pointer_type char_type; pointer_type char_type];\n    declare_func \"strcat\" void_type [pointer_type char_type; pointer_type char_type];\n\n    let extend_f =\n        let ft = function_type int_type [|char_type|] in\n        declare_function \"extend\" ft the_module\n    in\n    let bb = append_block context \"entry\" extend_f in\n    position_at_end bb builder;\n    let the_param = param extend_f 0 in\n    let ret_val = build_zext the_param int_type \"extend\" builder in\n    ignore(build_ret ret_val builder);\n\n    let shrink_f =\n        let ft = function_type char_type [|int_type|] in\n        declare_function \"shrink\" ft the_module\n    in\n    let bb = append_block context \"entry\" shrink_f in\n    position_at_end bb builder;\n    let the_param = param shrink_f 0 in\n    let ret_val = build_trunc the_param char_type \"shrink\" builder in\n    ignore(build_ret ret_val builder);\n\n    let writeByte_f =\n        let ft = function_type void_type [|char_type|] in\n        declare_function \"writeByte\" ft the_module\n    in\n    let bb = append_block context \"entry\" writeByte_f in\n    position_at_end bb builder;\n    let the_param = param writeByte_f 0 in\n    let ext_param = build_call extend_f [|the_param|] \"ext-wb\" builder in\n    let wi_f = match lookup_function \"writeInteger\" the_module with\n    | Some x -> x\n    | _ -> assert false\n    in\n    let _ret_val = build_call wi_f [|ext_param|] \"\" builder in\n    ignore(build_ret_void builder);\n\n    let readByte_f =\n        let ft = function_type char_type [||] in\n        declare_function \"readByte\" ft the_module\n    in\n    let bb = append_block context \"entry\" readByte_f in\n    position_at_end bb builder;\n    let ri_f = match lookup_function \"readInteger\" the_module with\n    | Some x -> x\n    | _ -> assert false\n    in\n    let the_int = build_call ri_f [||] \"\" builder in\n    let ret_val = build_call shrink_f [|the_int|] \"ri-shrink\" builder in\n    ignore(build_ret ret_val builder)\n\nlet rec add_ft ast =\n    let locals_list =\n        let g h tl = match h with\n        | VarDef x -> (to_llvm_type x.vtype) :: tl\n        | FuncDef _ -> tl\n        in List.fold_right g ast.def_list []\n    in\n    let param_list = List.map param_to_llvm_type ast.par_list in\n    let par_frame_ptr =\n        match ast.parent_func with\n        | Some par ->\n            let ft = begin match par.frame_t with\n            | Some x -> x\n            | None -> internal \"Trying to access a frame_t that isn't set yet\";\n                        raise Terminate\n            end in [ pointer_type ft ]\n        | None -> []\n    in\n    let ft_struct = named_struct_type context (\"ft_\" ^ ast.nested_name) in\n    ast.frame_t <- Some ft_struct;\n    let types_array = Array.of_list (List.concat [par_frame_ptr; param_list; locals_list]) in\n    struct_set_body ft_struct types_array false;\n    let h x = match x with\n    | FuncDef f -> add_ft f\n    | VarDef _ -> ()\n    in List.iter h ast.def_list\n\nlet to_icmp_type x = match x with\n    | Eq, _ -> Icmp.Eq\n    | Neq, _ -> Icmp.Ne\n    | Lt, TYPE_int -> Icmp.Slt\n    | Lte, TYPE_int -> Icmp.Sle\n    | Gt, TYPE_int -> Icmp.Sgt\n    | Gte, TYPE_int -> Icmp.Sge\n    | Lt, TYPE_byte -> Icmp.Ult\n    | Lte, TYPE_byte -> Icmp.Ule\n    | Gt, TYPE_byte -> Icmp.Ugt\n    | Gte, TYPE_byte -> Icmp.Uge\n    | _ -> internal \"Invalid compareOp, TYPE_ combination\";\n            raise Terminate\n\nlet rec get_fr_ptr fr_ptr x = match x with\n    | 0 -> fr_ptr\n    | n ->\n        let link_ptr = build_struct_gep fr_ptr 0 \"link_ptr\" builder in\n        let link = build_load link_ptr \"link\" builder in\n        get_fr_ptr link (n - 1)\n\nlet rec gen_fcall str frame f =\n    let gen_param frame (arg, is_byref) =\n        if (is_byref)  then\n            begin\n            let lval = match arg.kind with\n            | Lval x -> x\n            | _ -> internal \"Semantic analysis error (parameter passed by ref \\\n                                but is not an lvalue\"; raise Terminate\n            in match lval with\n            | Id lid -> gen_lval_id frame lid\n            | StringLit s ->\n                    let the_string = build_global_string s \"string-lit\" builder in\n                    build_struct_gep the_string 0 \"string_to_char_ptr\" builder\n            end\n        else gen_expr frame arg\n    in\n    let func = match lookup_function f.full_name the_module with\n    | Some x -> x\n    | None -> internal \"Semantic analysis error (calling undefined function)\";\n                raise Terminate\n    in\n    let expr_list =\n        if (Array.length (params func) = List.length f.fargs) then\n            List.map (gen_param frame) f.fargs\n        else\n            let nest_link = get_fr_ptr frame (f.fnest_diff + 1)\n            in nest_link::(List.map (gen_param frame) f.fargs)\n    in\n        let expr_array = Array.of_list expr_list in\n        build_call func expr_array str builder\n\nand gen_lval_id frame l =\n    let frame_ptr = get_fr_ptr frame l.nest_diff in\n    let elem_ptr = build_struct_gep frame_ptr l.offset \"elem_ptr\" builder in\n    let the_elem_ptr =\n        if (l.is_ptr) then build_load elem_ptr \"deref\" builder\n        else match l.ltype, l.ind with\n        | TYPE_array _, None | _, Some _ -> build_struct_gep elem_ptr 0 \"array_to_ptr\" builder\n        | _ -> elem_ptr\n    in\n    match l.ind with\n    | Some expr ->\n        let ind_expr = gen_expr frame expr in\n        build_gep the_elem_ptr [|ind_expr|] \"array_elem\" builder\n    | None  -> the_elem_ptr\n\n\nand gen_expr frame x = match x.kind with\n    | IntConst c -> const_int int_type c\n    | CharConst c -> const_int char_type (int_of_char c)\n    | Lval l ->\n        begin match l with\n        | Id l ->\n            let lval = gen_lval_id frame l in\n            build_load lval \"expr\" builder\n        | StringLit _ -> internal \"Trying to generate expression from string literal\";\n                            raise Terminate\n        end\n    | FuncCall f ->  gen_fcall \"ret_val\" frame f\n    | Pos p -> gen_expr frame p\n    | Neg n -> build_neg (gen_expr frame n) \"neg\" builder\n    | BinOp (expr1, op, expr2) ->\n        let expr_type = expr1.etype in\n        let expr1 = gen_expr frame expr1 in\n        let expr2 = gen_expr frame expr2 in\n        let build_fn, txt = begin match op, expr_type with\n        | Plus,_ -> build_add, \"add\"\n        | Minus,_ -> build_sub, \"sub\"\n        | Times,_ -> build_mul, \"mul\"\n        | Div,TYPE_int -> build_sdiv, \"sdiv\"\n        | Div,TYPE_byte -> build_udiv, \"udiv\"\n        | Mod,TYPE_int -> build_srem, \"srem\"\n        | Mod,TYPE_byte -> build_urem, \"urem\"\n        | _ -> internal \"Invalid binaryOp, TYPE_ combination\"; raise Terminate\n        end in build_fn expr1 expr2 txt builder\n\nlet rec gen_cond frame cond = match cond with\n    | True -> const_int bool_type 1\n    | False -> const_int bool_type 0\n    | Not ncond -> build_not (gen_cond frame ncond) \"not\" builder\n\n    | Compare (expr1, op, expr2) ->\n            let op_type = expr1.etype in\n            let expr1 = gen_expr frame expr1 in\n            let expr2 = gen_expr frame expr2 in\n            build_icmp (to_icmp_type (op, op_type)) expr1 expr2 \"cmp\" builder\n\n    | LogOp (cond1, op, cond2) ->\n            let cond1 = gen_cond frame cond1 in\n            let start_bb = insertion_block builder in\n            let the_function = block_parent start_bb in\n            let eval_sec_bb = append_block context \"second-cond\" the_function in\n            let merge_bb = append_block context \"merge\" the_function in\n            if (op = And) then ignore(build_cond_br cond1 eval_sec_bb merge_bb builder)\n            else ignore(build_cond_br cond1 merge_bb eval_sec_bb builder);\n\n            position_at_end eval_sec_bb builder;\n            let cond2 = gen_cond frame cond2 in\n            let new_eval_bb = insertion_block builder in\n            ignore(build_br merge_bb builder);\n\n            position_at_end merge_bb builder;\n            let inc_from_start = match op with\n            | Or -> const_int bool_type 1\n            | And -> const_int bool_type 0\n            in build_phi [(inc_from_start, start_bb);(cond2, new_eval_bb)] \"and-or_phi\" builder\n\nlet rec gen_stmt frame stmt = match stmt with\n    | Assign (lval, expr) ->\n            let lval = gen_lval_id frame lval in\n            let expr = gen_expr frame expr in\n            ignore(build_store expr lval builder)\n\n    | Compound stmt_list -> List.iter (gen_stmt frame) stmt_list\n\n    | VoidFuncCall f -> ignore(gen_fcall \"\" frame f)\n\n    | IfElse (cond, then_stmt, opt_else_stmt) ->\n            let cond_val = gen_cond frame cond in\n            let start_bb = insertion_block builder in\n            let the_function = block_parent start_bb in\n\n            let then_bb = append_block context \"then\" the_function in\n            let merge_bb = append_block context \"ifcont\" the_function in\n\n            position_at_end then_bb builder;\n            gen_stmt frame then_stmt;\n            begin match block_terminator (insertion_block builder) with\n            | None -> ignore(build_br merge_bb builder)\n            | Some _ -> ()\n            end;\n\n            begin match opt_else_stmt with\n            | Some else_stmt ->\n                let else_bb = append_block context \"else\" the_function in\n\n                position_at_end else_bb builder;\n                gen_stmt frame else_stmt;\n                begin match block_terminator (insertion_block builder) with\n                | None -> ignore(build_br merge_bb builder)\n                | Some _ -> ()\n                end;\n\n                position_at_end start_bb builder;\n                ignore(build_cond_br cond_val then_bb else_bb builder)\n\n            | None ->\n                position_at_end start_bb builder;\n                ignore(build_cond_br cond_val then_bb merge_bb builder)\n            end;\n\n            position_at_end merge_bb builder\n\n    | While (cond, stmt) ->\n            let start_bb = insertion_block builder in\n            let the_function = block_parent start_bb in\n            let cond_bb = append_block context \"loopcond\" the_function in\n            let loop_bb = append_block context \"loopbody\" the_function in\n            let merge_bb = append_block context \"loop_cont\" the_function in\n            ignore(build_br cond_bb builder);\n\n            position_at_end cond_bb builder;\n            let cond_val = gen_cond frame cond in\n            ignore(build_cond_br cond_val loop_bb merge_bb builder);\n\n            position_at_end loop_bb builder;\n            gen_stmt frame stmt;\n            begin match block_terminator (insertion_block builder) with\n            | None -> ignore(build_br cond_bb builder)\n            | Some _ -> ()\n            end;\n\n            position_at_end merge_bb builder\n\n    | Return (Some expr) ->\n            let ret_val = gen_expr frame expr in\n            ignore(build_ret ret_val builder)\n\n    | Return None -> ignore(build_ret_void builder)\n\n    | NOp -> ()\n\n\n\n\nlet rec gen_func f isOuter =\n    let helper x = match x with\n    | FuncDef f -> gen_func f false\n    | _ -> ()\n    in  List.iter helper f.def_list;\n    let param_list =\n        if isOuter\n            then (List.map param_to_llvm_type f.par_list)\n        else\n            let parent_f = match f.parent_func with\n            | Some x -> x\n            | None -> internal \"Trying to get parent function but pointer is not set\";\n                        raise Terminate\n            in let parent_ft = match parent_f.frame_t with\n            | Some x -> x\n            | None -> internal \"Trying to get parent's frame_t but pointer is not set\";\n                        raise Terminate\n            in (pointer_type parent_ft)::(List.map param_to_llvm_type f.par_list)\n    in\n    let param_array = Array.of_list param_list in\n    let ret_type = to_llvm_type f.ret_type in\n    let func_t = function_type ret_type param_array in\n    let func = match lookup_function f.nested_name the_module with\n        | None -> declare_function f.nested_name func_t the_module\n        | Some _ ->\n                internal \"Semantic analysis error (function %s already declared)\"\n                f.nested_name; raise Terminate\n    in\n    let bb = append_block context \"entry\" func in\n    position_at_end bb builder;\n    let frame_type = match f.frame_t with\n    | Some x -> x\n    | None -> internal \"Trying to get frame_t but pointer is not set\";\n                raise Terminate\n    in\n    let frame = build_alloca frame_type \"frame\" builder in\n    let i = ref 0 in\n    let store_param param =\n        let elem_ptr = build_struct_gep frame !i \"frame_elem\" builder in\n        ignore(build_store param elem_ptr builder); incr i;\n        in\n    iter_params store_param func;\n    List.iter (gen_stmt frame) f.comp_stmt;\n    begin match block_terminator (insertion_block builder) with\n    | None ->\n        begin match f.ret_type with\n        | TYPE_proc -> ignore(build_ret_void builder)\n        | TYPE_int -> ignore(build_ret (const_int int_type 0) builder)\n        | TYPE_byte -> ignore(build_ret (const_int char_type 0) builder)\n        | _ -> internal \"Function %s returns invalid type\" f.nested_name; raise Terminate\n        end\n    | Some _ -> () end;\n    if isOuter then begin\n        match lookup_function \"main\" the_module with\n        | Some _ -> ()\n        | None -> begin\n            let main_func = declare_function \"main\" func_t the_module in\n            let main_bb = append_block context \"entry\" main_func in\n            position_at_end main_bb builder;\n            if (return_type func_t != void_type) then begin\n                let res = build_call func (params main_func) \"main_call\" builder in\n                ignore(build_ret res builder)\n            end else begin\n                ignore(build_call func (params main_func) \"\" builder);\n                ignore(build_ret_void builder)\n            end\n        end\n    end\n\nlet add_opts pm =\n    let opts = [\n        add_ipsccp; add_memory_to_register_promotion; add_dead_arg_elimination;\n        add_instruction_combination; add_cfg_simplification;\n        add_function_inlining; add_function_attrs; add_scalar_repl_aggregation;\n        add_early_cse; add_cfg_simplification; add_instruction_combination;\n        add_tail_call_elimination; add_reassociation; add_loop_rotation;\n        add_loop_unswitch; add_instruction_combination; add_cfg_simplification;\n        add_ind_var_simplification; add_loop_idiom; add_loop_deletion;\n        add_loop_unroll; add_gvn; add_memcpy_opt; add_sccp; add_licm;\n        add_global_optimizer; add_global_dce;\n        add_aggressive_dce; add_cfg_simplification; add_instruction_combination;\n        add_dead_store_elimination; add_loop_vectorize; add_slp_vectorize;\n        add_strip_dead_prototypes; add_global_dce; add_constant_propagation;\n        add_cfg_simplification\n    ] in\n    List.iter (fun f -> f pm) opts\n\n\nlet irgen func do_opts =\n    Llvm_all_backends.initialize ();\n    let triple = Target.default_triple () in\n    set_target_triple triple the_module;\n    let target = Target.by_triple triple in\n    let machine = TargetMachine.create ~triple:triple target in\n    let dly = TargetMachine.data_layout machine in\n    set_data_layout (DataLayout.as_string dly) the_module;\n    declare_lib ();\n    add_ft func;\n    gen_func func true;\n    if (do_opts) then begin\n        let mpm = PassManager.create () in\n        add_opts mpm;\n        ignore(PassManager.run_module the_module mpm)\n    end;\n    assert_valid_module the_module\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 142, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 143, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"},"range":{"start":{"line":266,"character":23},"end":{"line":266,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 147, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":251,"character":65},"end":{"line":251,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":231,"character":101}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":147,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.014066696167ms
Sending response {"id": 150, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":147,"character":33},"end":{"line":147,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 151, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":147,"character":45}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":147,"character":45},"end":{"line":147,"character":45}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 153, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":140,"character":47}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 154, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":140,"character":47}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 155, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":140,"character":40},"end":{"line":140,"character":48}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 157, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":12},"end":{"line":141,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 160, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":21},"end":{"line":141,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":33},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr__list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 162, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":22},"end":{"line":141,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 164, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":35},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_ll_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 165, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":24},"end":{"line":141,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 167, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":36},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llv_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 168, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":25},"end":{"line":141,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 169, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 170, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":38},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llval_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 171, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":27},"end":{"line":141,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 172, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":40},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_list =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 173, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":29},"end":{"line":141,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 174, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00977516174316ms
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":30}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 176, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":32},"end":{"line":141,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Sending response {"id": 177, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":41},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_list in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 178, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":31},"end":{"line":141,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 179, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 181, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":26}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0131130218506ms
Sending response {"id": 182, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":12},"end":{"line":141,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":145,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":20},"end":{"line":145,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 185, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":42},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 186, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":41},"end":{"line":145,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 188, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":145,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":20},"end":{"line":145,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 190, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":145,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":44},"end":{"line":145,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":147,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 193, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":147,"character":33},"end":{"line":147,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 194, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":147,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":145,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 196, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":145,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":145,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00286102294922ms
Sending response {"id": 198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":8},"end":{"line":145,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 199, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":12},"end":{"line":145,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0388622283936ms
Sending response {"id": 200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":43},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr__list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 201, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":13},"end":{"line":145,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 202, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 203, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":45},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_ll_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 204, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":15},"end":{"line":145,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 206, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":46},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llv_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":47},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llva_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":48},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llval_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 207, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":18},"end":{"line":145,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":49},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llvalu_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 209, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":19},"end":{"line":145,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 210, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":50},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 211, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":20},"end":{"line":145,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 213, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":145,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":145,"character":13}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":8},"end":{"line":145,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 216, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":147,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":147,"character":33},"end":{"line":147,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":51},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 219, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":147,"character":50},"end":{"line":147,"character":50}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 220, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":51},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":51}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":142,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 222, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 224, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":140,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0350475311279ms
Sending response {"id": 226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 227, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":140,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":140,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 229, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":140,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":138,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 231, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Sending response {"id": 232, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":33}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00286102294922ms
Sending response {"id": 234, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":33},"end":{"line":141,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 235, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":52},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst  =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 236, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 237, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":53},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst e =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 238, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":35},"end":{"line":141,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 240, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":55},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst exp =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 241, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":37},"end":{"line":141,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 243, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":56},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 244, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":38},"end":{"line":141,"character":38}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 246, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":57},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_ =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 247, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":39},"end":{"line":141,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 248, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0150203704834ms
Sending response {"id": 249, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":58},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_l =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 250, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":40},"end":{"line":141,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":60},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        exit 1     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 252, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":42},"end":{"line":141,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
Sending response {"id": 254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 255, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":256,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":142,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 256, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":257,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":142,"character":14}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 257, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":258,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":14},"end":{"line":142,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 258, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":65},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        e     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":259,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 259, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":260,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":9},"end":{"line":142,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 260, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":261,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 261, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":66},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n             \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":262,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 262, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":263,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
Sending response {"id": 263, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":67},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        b     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":264,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":142,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 264, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":68},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        be     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":69},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        beg     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":265,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 265, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":266,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":11},"end":{"line":142,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 266, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":70},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begi     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":71},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":72},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin      \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":267,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 267, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":268,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":73},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin m     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":269,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":142,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 269, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":75},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin mat     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":270,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 270, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":271,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":17},"end":{"line":142,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":78},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match      \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":272,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 272, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":273,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 273, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":79},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match e     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":274,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":142,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":275,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 275, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":276,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":21},"end":{"line":142,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 276, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":81},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match exp     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":277,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 277, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":278,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":23},"end":{"line":142,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 278, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":279,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00977516174316ms
Sending response {"id": 279, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":82},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":280,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 280, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":281,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":24},"end":{"line":142,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0197887420654ms
Sending response {"id": 281, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":282,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 282, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":83},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":283,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 283, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":284,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":25},"end":{"line":142,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 284, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":285,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 285, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":84},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_l     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":286,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 286, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":287,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":26},"end":{"line":142,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 287, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":288,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":85},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_ls     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":289,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 289, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":290,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":27},"end":{"line":142,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 290, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":291,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 291, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":86},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":292,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 292, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":293,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":28},"end":{"line":142,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 293, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":294,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 294, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":87},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst      \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":295,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 295, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":296,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 296, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":88},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst w     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":297,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":142,"character":30},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 297, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":91},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":298,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 298, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":299,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":142,"character":33},"end":{"line":142,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 299, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":300,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 300, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":94},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n        \r\n             \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":301,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 301, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":302,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 302, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":97},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":303,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":144,"character":11},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":304,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 304, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":305,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":144,"character":11},"end":{"line":144,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":306,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 306, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":97},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":97}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":99},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n        \r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":307,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 307, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":308,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00619888305664ms
Sending response {"id": 308, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":100},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            \r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":309,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 309, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":310,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":311,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 311, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Jason/Irgen.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":101},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":312,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 312, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":313,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":13},"end":{"line":143,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":314,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 314, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":102},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            |\r\n            \r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":315,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 315, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":103},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            |\r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":316,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 316, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":317,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":144,"character":13},"end":{"line":144,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 317, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":318,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 318, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":319,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":142,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0529289245605ms
Sending response {"id": 319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":320,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":13},"end":{"line":143,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 320, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":104},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | \r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":321,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 321, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":322,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00619888305664ms
Sending response {"id": 322, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":105},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | e\r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":323,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 323, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":324,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":15},"end":{"line":143,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 324, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":106},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er\r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":325,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 325, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":326,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":16},"end":{"line":143,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 326, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":327,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":107},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er \r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":328,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 328, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":329,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 329, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":109},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | e\r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":330,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 330, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":331,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":15},"end":{"line":143,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 331, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":332,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00619888305664ms
Sending response {"id": 332, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":110},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex\r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":333,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 333, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":334,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":16},"end":{"line":143,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 334, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":335,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 335, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":111},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex \r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":336,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 336, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":337,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":113},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex ::\r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":338,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 338, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":339,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":19},"end":{"line":143,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 339, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":114},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: \r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":340,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 340, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":341,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 341, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":116},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl\r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":342,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 342, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":343,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":22},"end":{"line":143,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 343, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":344,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 344, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":117},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl \r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":118},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl -\r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":345,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 345, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":346,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":24},"end":{"line":143,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 346, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":347,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":119},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl ->\r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":348,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 348, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":349,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":25},"end":{"line":143,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 349, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":120},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl ->\r\n            \r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":350,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 350, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":121},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl ->\r\n                \r\n            |\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":351,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 351, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":352,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":353,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":144,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 353, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":354,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":13},"end":{"line":145,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 354, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":122},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl ->\r\n\r\n            |   \r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":355,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 355, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":356,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 356, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":123},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl ->\r\n\r\n            |   []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":357,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 357, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":358,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":17},"end":{"line":145,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 358, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":359,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 359, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":360,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":18},"end":{"line":145,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 360, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":361,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":16},"end":{"line":145,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 361, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":362,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":145,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 362, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":124},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl ->\r\n\r\n            |  []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":363,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 363, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":364,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":15},"end":{"line":145,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 364, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":365,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 365, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":366,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":145,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 366, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":125},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl ->\r\n\r\n            | []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":367,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 367, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":368,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":14},"end":{"line":145,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 368, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":369,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0429153442383ms
Sending response {"id": 369, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":370,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":16},"end":{"line":145,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 370, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":127},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl ->\r\n\r\n            | [] -\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":371,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 371, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":372,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":18},"end":{"line":145,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 372, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":373,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 373, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":128},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl ->\r\n\r\n            | [] ->\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":374,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 374, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":375,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":19},"end":{"line":145,"character":19}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 375, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":376,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 376, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":131},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl ->\r\n\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":377,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 377, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":378,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":145,"character":22},"end":{"line":145,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 378, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":379,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 379, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":131},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | ex :: tl ->\r\n\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":131}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":380,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":25},"end":{"line":143,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 380, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":381,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":17},"end":{"line":143,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 381, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":382,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0231266021729ms
Sending response {"id": 382, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":382}}
Read message 
{"jsonrpc":"2.0","id":383,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 383, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":384,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":16},"end":{"line":143,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 384, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":133},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl ->\r\n\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":385,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 385, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":386,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":16},"end":{"line":143,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 386, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":387,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 387, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":133},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl ->\r\n\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":133}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":136},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl ->\r\n            \r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":137},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl ->\r\n                \r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":388,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 388, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":389,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 389, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":142},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl ->\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":390,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 390, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":391,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":25},"end":{"line":143,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 391, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":392,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 392, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":143},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> \r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":393,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 393, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":394,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 394, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":144},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> ()\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":395,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":27}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00405311584473ms
Sending response {"id": 395, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":145},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> ()\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":396,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 396, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":397,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":28},"end":{"line":143,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 397, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":398,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 398, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":399,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 399, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":400,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":27},"end":{"line":143,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 400, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":146},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (c)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":401,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":28},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00214576721191ms
Sending response {"id": 401, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":149},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (code)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":402,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 402, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":403,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":31},"end":{"line":143,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 403, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":404,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 404, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":150},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":405,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 405, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":406,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":39},"end":{"line":143,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 406, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":407,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 407, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":151},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr )\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":408,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 408, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":409,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":40},"end":{"line":143,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 409, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":410,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 410, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":152},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr f)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":411,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":41},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 411, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":153},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr fr)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":412,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 412, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":413,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":42},"end":{"line":143,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 413, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":414,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 414, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":154},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":415,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 415, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":416,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":53},"end":{"line":143,"character":53}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 416, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":155},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue )\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":417,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 417, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":418,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":54},"end":{"line":143,"character":54}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 418, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":419,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 419, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":156},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue e)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":420,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":55},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 420, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":157},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":421,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 421, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":422,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":56},"end":{"line":143,"character":56}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 422, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":423,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 423, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":424,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":144,"character":22},"end":{"line":144,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 424, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":425,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.018835067749ms
Sending response {"id": 425, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":426,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 426, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":427,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":14},"end":{"line":143,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 427, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":428,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":57},"end":{"line":143,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00476837158203ms
Sending response {"id": 428, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":158},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) \r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":429,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 429, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":430,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 430, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":160},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) ::\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":431,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 431, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":432,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":60},"end":{"line":143,"character":60}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 432, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":161},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: \r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":433,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 433, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":434,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 434, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":162},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: ()\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":435,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":62}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00405311584473ms
Sending response {"id": 435, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":436,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 436, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":437,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":62},"end":{"line":143,"character":62}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 437, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":438,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 438, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":439,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 439, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":440,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 440, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":441,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":141,"character":12},"end":{"line":141,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 441, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":442,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":63}}}
[server] Got a method textDocument/hover
[server] processing took 0.0112056732178ms
Sending response {"id": 442, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":443,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":62},"end":{"line":143,"character":62}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 443, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":163},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":444,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 444, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":445,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":83},"end":{"line":143,"character":83}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 445, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":446,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 446, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":164},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst )\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":447,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 447, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":448,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":84},"end":{"line":143,"character":84}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 448, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":449,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 449, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":450,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":62}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 450, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":451,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":141,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 451, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":165},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst t)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":452,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":143,"character":85},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 452, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":453,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 453, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":454,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":85},"end":{"line":143,"character":85}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 454, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":455,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 455, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":166},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":456,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 456, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":457,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":86},"end":{"line":143,"character":86}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 457, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":458,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0171661376953ms
Sending response {"id": 458, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":459,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":143,"character":87},"end":{"line":143,"character":87}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 459, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":166},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_list = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":166}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":460,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 460, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":461,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 461, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":462,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":8},"end":{"line":148,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 462, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":463,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Sending response {"id": 463, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":464,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 464, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":465,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":23},"end":{"line":148,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 465, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":466,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":25}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0181198120117ms
Sending response {"id": 466, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":467,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":8},"end":{"line":148,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 467, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":468,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":23},"end":{"line":148,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 468, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":167},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_list in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":469,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 469, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":470,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":22},"end":{"line":148,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 470, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":471,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00619888305664ms
Sending response {"id": 471, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":472,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 472, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":473,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":8},"end":{"line":148,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 473, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":474,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 474, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":475,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":150,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 475, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":476,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":150,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 476, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":477,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":150,"character":33},"end":{"line":150,"character":50}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 477, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":168},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":478,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 478, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":479,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":150,"character":49},"end":{"line":150,"character":49}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 479, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":480,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 480, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":168},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":168}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":481,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 481, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":482,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 482, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":483,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.00309944152832ms
Sending response {"id": 483, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":484,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00190734863281ms
Sending response {"id": 484, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":483}}
Read message 
{"jsonrpc":"2.0","id":485,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":27},"end":{"line":148,"character":48}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 485, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":486,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":48}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 486, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":487,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":48},"end":{"line":148,"character":48}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 487, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":169},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst  in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":488,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 488, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":489,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 489, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":170},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst c in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":490,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":50},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 490, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":171},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst ca in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":491,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 491, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":492,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":51},"end":{"line":148,"character":51}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 492, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":493,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 493, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":172},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":494,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 494, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":495,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":57},"end":{"line":148,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Sending response {"id": 495, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":496,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 496, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":173},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast. in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":497,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":58},"context":{"triggerKind":2,"triggerCharacter":"."}}}
[server] Got a method textDocument/completion
[server] processing took 0.00214576721191ms
Sending response {"id": 497, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":498,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 498, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":499,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":58},"end":{"line":148,"character":58}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 499, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":500,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0150203704834ms
Sending response {"id": 500, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":174},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.c in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":501,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":59},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00214576721191ms
Sending response {"id": 501, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":175},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.ca in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":502,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 502, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":503,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":60},"end":{"line":148,"character":60}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 503, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":504,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 504, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":177},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.call in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":505,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 505, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":506,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":62},"end":{"line":148,"character":62}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 506, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":178},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.call_ in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":507,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 507, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":508,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":63},"end":{"line":148,"character":63}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 508, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":509,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 509, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":179},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.call_e in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":510,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0159740447998ms
Sending response {"id": 510, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":511,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":64},"end":{"line":148,"character":64}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0147819519043ms
Sending response {"id": 511, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":180},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.call_ex in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":512,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":65},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 512, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":513,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 513, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":514,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":65},"end":{"line":148,"character":65}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 514, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":181},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.call_exp in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":515,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":66},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00596046447754ms
Sending response {"id": 515, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":182},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.call_expr in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":516,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":148,"character":67},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 516, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":517,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 517, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":518,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":148,"character":67},"end":{"line":148,"character":67}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 518, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":519,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 519, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":182},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.call_expr in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":182}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":520,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":155,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 520, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":183},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.call_expr in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n    \r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":521,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 521, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":522,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 522, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":184},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.call_expr in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":185},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.call_expr in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":523,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 523, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":524,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 524, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":185},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\n(* Helping functions *)\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            let pr_lltyp = give_lltype pr.par_type in\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let access_link_type = pointer_type lltype in\r\n\r\n    let arr_of_lltypes = Array.of_list ( access_link_type :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    ll_frame_type\r\n\r\nlet give_func_lltype func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let func_lltype = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    (*let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)*)\r\n\r\n    func_lltype\r\n\r\nlet rec set_offsets_in_ast func_ast =\r\n        let set_pars par_lst idx =\r\n            begin match par_lst with\r\n                | par :: tl ->\r\n                    par.par_frame_offset <- idx;\r\n                    set_pars tl (idx + 1)\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_pars func_ast.func_pars 1;\r\n        let set_locvars locals_lst idx =\r\n            begin match locals_lst with\r\n                | (Local_var locvar) :: tl ->\r\n                    locvar.locvar_frame_offset <- idx;\r\n                    set_locvars tl (idx + 1)\r\n                | (Local_func _) :: tl ->\r\n                    set_locvars tl idx\r\n                | [] -> ()\r\n            end\r\n        in\r\n        set_locvars func_ast.func_local ((List.length func_ast.func_pars) + 1)\r\n\r\n(* End of helping functions *)\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    (* Set all offsets in ast -- could have been done in semantic analysis*)\r\n    set_offsets_in_ast func_ast;\r\n\r\n    let func_lltype = give_func_lltype func_ast in (*Function lltype *)\r\n    let func_llvalue = define_function func_ast.func_id func_lltype the_module in (* Function llvalue *)\r\n\r\n    (* Create function basic-block *)\r\n    let f_bb = entry_block func_llvalue in\r\n    position_at_end f_bb builder;\r\n\r\n    (* Create frame *)\r\n    let frame_type = give_frame_lltype func_ast in\r\n    let frame_llvalue = build_alloca frame_type \"frame\" builder in\r\n\r\n    let store_at valuetostore_llvalue idx =\r\n        let element_ptr_llvalue = build_struct_gep frame_llvalue idx \"GEP\" builder in\r\n        let _ = build_store valuetostore_llvalue element_ptr_llvalue builder in\r\n        ()\r\n    in\r\n\r\n    (* Store access_link at 0 position in frame *)\r\n    store_at access_link 0;\r\n\r\n    (* Store each parameter into the frame *)\r\n    let rec store_par_llvalue_lst_to_frame par_llvalue_lst idx =\r\n        begin match par_llvalue_lst with\r\n            | par_llvalue :: tl ->\r\n                store_at par_llvalue idx;\r\n                store_par_llvalue_lst_to_frame tl (idx+1)\r\n            | [] -> ()\r\n        end\r\n    in\r\n    let par_llvalue_lst = Array.to_list (params func_llvalue) in\r\n    (* Store starting from position 1 *)\r\n    store_par_llvalue_lst_to_frame par_llvalue_lst 1;    \r\n    \r\n    List.iter (codegen_stmt frame_llvalue) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call frame_llvalue call_ast =\r\n    let rec give_expr_llvalue_lst expr_lst =\r\n        begin match expr_lst with\r\n            | er :: tl -> (codegen_expr frame_llvalue er) :: (give_expr_llvalue_lst tl)\r\n            | [] -> []\r\n        end     \r\n    in\r\n\r\n    let expr_llvalue_lst = give_expr_llvalue_lst call_ast.call_expr in\r\n\r\n    let expr_arr = Array.of_list expr_llvalue_lst in\r\n    build_call func expr_array \"call\" builder\r\n\r\nand rec codegen_stmt frame_llvalue stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt frame_llvalue) st_lst\r\n\r\n        | S_call fcall              -> (* Call to a void function *)\r\n            ignore (codegen_call frame_llvalue fcall)\r\n\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n            ignore (build_ret_void builder)\r\n        | S_return (Some er)        ->\r\n            let to_return_llvalue = codegen_expr frame_llvalue er in\r\n            ignore (build_ret to_return_llvalue)\r\n\r\n(* TO CHECK THIS -- need to add frame *)\r\nand rec codegen_expr frame_llvalue expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval frame_llvalue v\r\n        | E_call cl                 -> codegen_call frame_llvalue cl\r\n        | E_sign (SPlus,er)         -> codegen_expr frame_llvalue er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr frame_llvalue er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr frame_llvalue er1 in\r\n            let ller2 = codegen_expr frame_llvalue er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr frame_llvalue er1) (codegen_expr frame_llvalue er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":185}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
Read message 
{"jsonrpc":"2.0","id":525,"method":"shutdown","params":null}
Sending response {"id": 525, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"exit","params":null}
Got exit! Terminating loop
Finished
