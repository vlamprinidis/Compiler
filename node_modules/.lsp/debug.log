Hello - from /home/vlassis/.vscode/extensions/jaredly.reason-vscode-1.7.5/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","languageId":"ocaml","version":1,"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    let rec give_par_lltype_lst par_lst =\r\n        let pr_lltyp = give_lltype pr.par_type in\r\n        begin match par_lst with\r\n            | pr :: tl ->\r\n                begin match pr.pass_way with\r\n                    | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                    | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n                end\r\n            | [] -> []\r\n        end\r\n    in\r\n\r\n    let rec give_locvar_lltype_lst loc_lst =\r\n        begin match loc_lst with\r\n            | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n            | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n            | []                    -> []\r\n    in\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":23,"character":23},"end":{"line":23,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":23,"character":23},"end":{"line":23,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","languageId":"ocaml","version":1,"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 7, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":17},"end":{"line":43,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml","languageId":"ocaml","version":1,"text":"open Format\r\n\r\nopen Identifier\r\nopen Types\r\nopen Symbol\r\nopen Ast\r\nopen Error\r\n\r\nlet show_offsets = true\r\n\r\nlet rec pretty_typ ppf typ =\r\n  match typ with\r\n  | TYPE_none ->\r\n      fprintf ppf \"<undefined>\"\r\n  | TYPE_int ->\r\n      fprintf ppf \"int\"\r\n  | TYPE_byte ->\r\n      fprintf ppf \"byte\"\r\n  | TYPE_array (et, sz) ->\r\n      pretty_typ ppf et;\r\n      if sz > 0 then\r\n        fprintf ppf \" [%d]\" sz\r\n      else\r\n        fprintf ppf \" []\"\r\n  | TYPE_proc ->\r\n      fprintf ppf \"proc\"\r\n\r\nlet pretty_mode ppf mode =\r\n  match mode with\r\n  | PASS_BY_REFERENCE ->\r\n      fprintf ppf \"reference \"\r\n  | _ ->\r\n      ()\r\n\r\nlet printSymbolTable () =\r\n  let rec walk ppf scp =\r\n    if scp.sco_nesting <> 0 then begin\r\n      fprintf ppf \"scope: \";\r\n      let entry ppf e =\r\n        fprintf ppf \"%a\" pretty_id e.entry_id;\r\n        match e.entry_info with\r\n        | ENTRY_none ->\r\n            fprintf ppf \"<none>\"\r\n        | ENTRY_variable inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.variable_offset\r\n        | ENTRY_function inf ->\r\n            let param ppf e =\r\n              match e.entry_info with\r\n                | ENTRY_parameter inf ->\r\n                   fprintf ppf \"%a%a : %a\"\r\n                      pretty_mode inf.parameter_mode\r\n                      pretty_id e.entry_id\r\n                      pretty_typ inf.parameter_type\r\n                | _ ->\r\n                    fprintf ppf \"<invalid>\" in\r\n            let rec params ppf ps =\r\n              match ps with\r\n              | [p] ->\r\n                  fprintf ppf \"%a\" param p\r\n              | p :: ps ->\r\n                  fprintf ppf \"%a; %a\" param p params ps;\r\n              | [] ->\r\n                  () in\r\n            fprintf ppf \"(%a) : %a\"\r\n              params inf.function_paramlist\r\n              pretty_typ inf.function_result\r\n        | ENTRY_parameter inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.parameter_offset\r\n        | ENTRY_temporary inf ->\r\n            if show_offsets then\r\n              fprintf ppf \"[%d]\" inf.temporary_offset in\r\n      let rec entries ppf es =\r\n        match es with\r\n          | [e] ->\r\n              fprintf ppf \"%a\" entry e\r\n          | e :: es ->\r\n              fprintf ppf \"%a, %a\" entry e entries es;\r\n          | [] ->\r\n              () in\r\n      match scp.sco_parent with\r\n      | Some scpar ->\r\n          fprintf ppf \"%a\\n%a\"\r\n            entries scp.sco_entries\r\n            walk scpar\r\n      | None ->\r\n          fprintf ppf \"<impossible>\\n\"\r\n    end in\r\n  let scope ppf scp =\r\n    if scp.sco_nesting == 0 then\r\n      fprintf ppf \"no scope\\n\"\r\n    else\r\n      walk ppf scp in\r\n  printf \"%a----------------------------------------\\n\"\r\n    scope !currentScope\r\n\r\nlet funTypeStack = Stack.create ()\r\n\r\n\r\n    \r\nlet seman tree =\r\n\r\n    (* help funcs *)\r\n    \r\n    let rec make_cond cond_ast =\r\n        match cond_ast with\r\n            | C_true ->\r\n                ()\r\n                \r\n            | C_false ->\r\n                ()\r\n                \r\n            | (C_not cond_cond) ->\r\n                make_cond cond_cond\r\n                \r\n            | C_compare (cond_expr_left, cond_compare_op, cond_expr_right) ->\r\n                make_expr cond_expr_left;\r\n                make_expr cond_expr_right;\r\n                if( (cond_expr_left.expr_type = Some TYPE_int || cond_expr_left.expr_type = Some TYPE_byte) && cond_expr_left.expr_type = cond_expr_right.expr_type )\r\n                then( () )\r\n                else( fatal \"Compare type mismatch\" )\r\n                \r\n            | C_logic (cond_cond_left, cond_logic_op, cond_cond_right) ->\r\n                make_cond cond_cond_left;\r\n                make_cond cond_cond_right\r\n    \r\n    (*check if parameter call is ok*)\r\n    and make_call func_call_ast =\r\n        let e = lookupEntry (id_make func_call_ast.call_id) LOOKUP_ALL_SCOPES true in\r\n        begin match e.entry_info with\r\n        | ENTRY_function func_entry ->\r\n            List.iter make_expr func_call_ast.call_expr;\r\n            \r\n            let get_param_typ param_entry = match param_entry.entry_info with \r\n                                        | ENTRY_parameter par -> (par.parameter_type,par.parameter_mode)\r\n                                        | _ -> fatal \"Parameter declaration gone wrong -- Why?\"; (TYPE_none,PASS_BY_VALUE)\r\n            in\r\n            let get_actual_param_typ expr_ = match expr_.expr_type with\r\n                                            | Some ex_type_some -> (ex_type_some,expr_.expr_raw)\r\n                                            | None -> fatal \"Sth gone terribly wrong\"; (TYPE_none,E_int 0)\r\n            in\r\n            \r\n            let declared_param_typ_lst = List.map get_param_typ func_entry.function_paramlist in\r\n            let actual_param_typ_lst = List.map get_actual_param_typ func_call_ast.call_expr in\r\n            \r\n            let equal_declared_actual (dec_type,dec_mode) (act_type,act_raw) = \r\n                match (dec_mode, act_raw) with\r\n                    | (PASS_BY_VALUE, _) -> equalType dec_type act_type\r\n                    | (PASS_BY_REFERENCE, E_val _) -> equalType dec_type act_type\r\n                    | _ -> false\r\n            in\r\n            \r\n            let myPrint_dec (s,info) =\r\n                pretty_typ std_formatter s;\r\n                match info with\r\n                    | PASS_BY_VALUE -> fprintf std_formatter \"[PASS_BY_VALUE] \"\r\n                    | PASS_BY_REFERENCE -> fprintf std_formatter \"[PASS_BY_REFERENCE] \"\r\n            in\r\n            \r\n            let myPrint_act (s,info) =\r\n                pretty_typ std_formatter s;\r\n                match info with\r\n                    | E_val _ -> fprintf std_formatter \"[L_value] \"\r\n                    | _ -> fprintf std_formatter \"[NOT_L_value] \"\r\n            in\r\n\r\n            if( ( List.length declared_param_typ_lst = List.length actual_param_typ_lst ) && \r\n                ( List.for_all2 equal_declared_actual declared_param_typ_lst actual_param_typ_lst )\r\n              )\r\n            \r\n            then( func_call_ast.return_type <- Some func_entry.function_result )\r\n            \r\n            else(\r\n                Printf.printf \"%s\" \"Expected parameters: \";\r\n                List.iter myPrint_dec declared_param_typ_lst;\r\n                print_newline ();\r\n                Printf.printf \"%s\" \"Given parameters:    \"; \r\n                List.iter myPrint_act actual_param_typ_lst;\r\n                print_newline ();\r\n                fatal \"Incorrect argument format\" \r\n            )\r\n            \r\n        | _ ->\r\n            fatal \"Call of a non-function\"\r\n        end\r\n    and make_expr expr_ast = \r\n        match expr_ast.expr_raw with\r\n            | E_int ex_int -> \r\n                expr_ast.expr_type <- Some TYPE_int\r\n                \r\n            | E_char ex_char -> \r\n                expr_ast.expr_type <- Some TYPE_byte\r\n                \r\n            | E_val ex_l_value ->\r\n                make_l_value ex_l_value;\r\n                expr_ast.expr_type <- ex_l_value.l_value_type\r\n                \r\n            | E_call ex_func_call ->\r\n                make_call ex_func_call;\r\n                expr_ast.expr_type <- ex_func_call.return_type\r\n                \r\n            | E_sign (ex_sign, ex_expr) ->\r\n                make_expr ex_expr;\r\n                if(ex_expr.expr_type = Some TYPE_int)\r\n                then(expr_ast.expr_type <- ex_expr.expr_type)\r\n                else(fatal \"Sign must be followed by an integer\")\r\n                \r\n            | E_op (ex_expr_left, ex_op, ex_expr_right) ->\r\n                make_expr ex_expr_left;\r\n                make_expr ex_expr_right;\r\n                \r\n                if((ex_expr_left.expr_type = Some TYPE_int || ex_expr_left.expr_type = Some TYPE_byte) && ex_expr_left.expr_type = ex_expr_right.expr_type)\r\n                then(expr_ast.expr_type <- ex_expr_left.expr_type)\r\n                else(fatal \"Type mismatch\")\r\n            \r\n    and make_l_value l_value_ast =\r\n        match l_value_ast.l_value_raw with\r\n            | L_exp (lval_id, lval_expr_opt) ->\r\n                let e = lookupEntry (id_make lval_id) LOOKUP_ALL_SCOPES true in\r\n                let e_typ = match e.entry_info with\r\n                    | ENTRY_variable var_info ->\r\n                        Some var_info.variable_type\r\n                    | ENTRY_parameter par_info ->\r\n                        Some par_info.parameter_type\r\n                    | _ -> \r\n                        fatal \"Identifier not valid\";\r\n                        None\r\n                in\r\n                begin match lval_expr_opt with\r\n                    | Some lval_expr_some -> \r\n                        (*Check if not array*)\r\n                        begin match e_typ with\r\n                            | Some (TYPE_array (elem_typ,_)) -> \r\n                                make_expr lval_expr_some;\r\n                                (*Check if index is int*)\r\n                                if( lval_expr_some.expr_type <> Some TYPE_int )\r\n                                then( fatal \"Array index must be an integer\" );\r\n                                l_value_ast.l_value_type <- Some elem_typ;\r\n                                (* Nesting *)\r\n                                l_value_ast.l_value_nesting_scope <- e.entry_scope.sco_nesting;\r\n                                \r\n                            | _ -> \r\n                                fatal \"Variable not an array\"\r\n                        end\r\n                    | None ->\r\n                        l_value_ast.l_value_type <- e_typ;\r\n                        (* Nesting *)\r\n                        l_value_ast.l_value_nesting_scope <- e.entry_scope.sco_nesting;\r\n                end\r\n            | L_str lval_str -> (*String literal = TYPE_array (TYPE_byte,size < 0)*)\r\n                l_value_ast.l_value_type <- Some TYPE_array (TYPE_byte,-1)\r\n    in\r\n    \r\n    let rec make_stmt stmt_ast = \r\n        match stmt_ast with\r\n            | Null_stmt -> \r\n                ()\r\n                \r\n            | S_assign (st_l_value, st_expr) ->\r\n                make_expr st_expr;\r\n                make_l_value st_l_value;\r\n                begin match (st_l_value.l_value_type, st_expr.expr_type) with\r\n                    | (Some TYPE_array (TYPE_byte,siz),_)   -> if( siz < 0 ) then ( fatal \"Cannot assign value to a string literal\" )\r\n                    | (Some TYPE_proc,_)                    -> fatal \"L value is a procedure -- How did this happen?\" (*Obsolete*)\r\n                    | (_,Some TYPE_proc)                    -> fatal \"Cannot assign a procedure\" (*Obsolete*)\r\n                    | (typ1,typ2)                           -> if(typ1 <> typ2)then(fatal \"Assignment type mismatch\")\r\n                end\r\n                \r\n            | S_comp st_stmt_lst ->\r\n                List.iter make_stmt st_stmt_lst\r\n                \r\n            | S_call st_func_call -> \r\n                make_call st_func_call\r\n                \r\n            | S_if (st_cond,st_stmt,st_stmt_opt) ->\r\n                make_cond st_cond;\r\n                make_stmt st_stmt;\r\n                begin match st_stmt_opt with\r\n                    | Some st_stmt_some -> \r\n                        make_stmt st_stmt_some\r\n                    | None -> \r\n                        ()\r\n                end\r\n                    \r\n            | S_while (st_cond,st_stmt) -> \r\n                make_cond st_cond;\r\n                make_stmt st_stmt\r\n                \r\n            | S_return st_expr_opt -> \r\n                let funTypeTop = Stack.pop funTypeStack in\r\n                begin match st_expr_opt with\r\n                    | Some st_expr_some ->\r\n                        Stack.push funTypeTop funTypeStack;\r\n                        if( funTypeTop = TYPE_proc )\r\n                        then( fatal \"Procedure cannot return a value\" )\r\n                        else( make_expr st_expr_some; if( st_expr_some.expr_type <> Some funTypeTop ) then ( fatal \"Return type mismatch\" ) )\r\n                    | None ->\r\n                        Stack.push funTypeTop funTypeStack;\r\n                        if( funTypeTop <> TYPE_proc )\r\n                        then( fatal \"Return statement cannot be empty here\" )\r\n                end        \r\n    in\r\n    \r\n    let make_par f par_ast =\r\n        match (par_ast.par_type,par_ast.par_pass_way) with\r\n            | (TYPE_array _, PASS_BY_VALUE) -> fatal \"An array cannot be passed by value\"\r\n            | _ -> ignore (newParameter (id_make par_ast.par_id) par_ast.par_type par_ast.par_pass_way f true); ()\r\n    in\r\n    \r\n    let rec make_local local_ast = \r\n        match local_ast with\r\n            | Local_func loc_func ->\r\n                make_func loc_func;\r\n                ()\r\n            | Local_var loc_var ->\r\n                (*In case an array is declared, its size needs to be a positive integer*)\r\n                begin match loc_var.var_type with\r\n                    | TYPE_array (_,siz)    -> if(siz <= 0)then(fatal \"Array size must be a positive integer\")\r\n                    | _                     -> ()\r\n                end;\r\n                ignore (newVariable (id_make loc_var.var_id) loc_var.var_type true);\r\n                ()\r\n                \r\n    and make_func f_ast =\r\n        \r\n        let f_SYM = newFunction (id_make f_ast.func_id) true in\r\n        Stack.push f_ast.func_ret_type funTypeStack;\r\n        (* Nesting *)\r\n        f_ast.func_nesting_scope <- f_SYM.entry_scope.sco_nesting;\r\n        \r\n        openScope ();\r\n        \r\n        List.iter (make_par f_SYM) f_ast.func_pars;\r\n        endFunctionHeader f_SYM f_ast.func_ret_type;\r\n        \r\n        List.iter make_local f_ast.func_local;\r\n        List.iter make_stmt f_ast.func_stmt;\r\n        \r\n        (* printSymbolTable (); *)\r\n        closeScope ();\r\n        ignore (Stack.pop funTypeStack);\r\n        ()\r\n    in\r\n    \r\n    initSymbolTable 256;\r\n    openScope ();\r\n    \r\n(********* add existing functions **********************************************************************************************************************)\r\n    \r\n(***************** writeInteger (n : int) : proc *******************************************************************************************************)\r\n    let f_wInt = newFunction (id_make \"writeInteger\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wInt {par_id = \"n\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n    endFunctionHeader f_wInt TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeByte (b : byte) : proc *********************************************************************************************************)\r\n    let f_wByte = newFunction (id_make \"writeByte\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wByte {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_wByte TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeChar (b : byte) : proc *********************************************************************************************************)\r\n    let f_wChar = newFunction (id_make \"writeChar\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wChar {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_wChar TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** writeString (s : reference byte []) : proc ******************************************************************************************)\r\n    let f_wStr = newFunction (id_make \"writeString\") true in\r\n    openScope ();\r\n    \r\n    make_par f_wStr {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n    endFunctionHeader f_wStr TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readInteger () : int ****************************************************************************************************************)\r\n    let f_rInt = newFunction (id_make \"readInteger\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rInt TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readByte () : byte ******************************************************************************************************************)\r\n    let f_rByte = newFunction (id_make \"readByte\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rByte TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readChar () : byte ******************************************************************************************************************)\r\n    let f_rChar = newFunction (id_make \"readChar\") true in\r\n    openScope ();\r\n    \r\n    endFunctionHeader f_rChar TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** readString (n : int, s : reference byte []) : proc **********************************************************************************)\r\n    let f_rStr = newFunction (id_make \"readString\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_rStr) [{par_id = \"n\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n                                 {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_rStr TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** extend (b : byte) : int *************************************************************************************************************)\r\n    let f_ext = newFunction(id_make \"extend\") true in\r\n    openScope ();\r\n    \r\n    make_par f_ext {par_id = \"b\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_byte};\r\n    endFunctionHeader f_ext TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** shrink (i : int) : byte *************************************************************************************************************)\r\n    let f_shrink = newFunction(id_make \"shrink\") true in\r\n    openScope ();\r\n    \r\n    make_par f_shrink {par_id = \"i\"; par_pass_way = PASS_BY_VALUE; par_type = TYPE_int};\r\n    endFunctionHeader f_shrink TYPE_byte;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strlen (s : reference byte []) : int ************************************************************************************************)\r\n    let f_len = newFunction(id_make \"strlen\") true in\r\n    openScope ();\r\n    \r\n    make_par f_len {par_id = \"s\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n    endFunctionHeader f_len TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcmp (s1 : reference byte [], s2 : reference byte []) : int ***********************************************************************)\r\n    let f_cmp = newFunction (id_make \"strcmp\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cmp) [{par_id = \"s1\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"s2\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cmp TYPE_int;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcpy (trg : reference byte [], src : reference byte []) : proc ********************************************************************)\r\n    let f_cpy = newFunction (id_make \"strcpy\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cpy) [{par_id = \"trg\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"src\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cpy TYPE_proc;\r\n    \r\n    closeScope ();\r\n    \r\n(***************** strcat (trg : reference byte [], src : reference byte []) : proc ********************************************************************)\r\n    let f_cat = newFunction (id_make \"strcat\") true in\r\n    openScope ();\r\n    \r\n    List.iter (make_par f_cat) [{par_id = \"trg\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)};\r\n                                {par_id = \"src\"; par_pass_way = PASS_BY_REFERENCE; par_type = TYPE_array (TYPE_byte,-1)}];\r\n    endFunctionHeader f_cat TYPE_proc;\r\n\r\n    closeScope ();\r\n    \r\n(********* end of existing functions *******************************************************************************************************************)\r\n\r\n    make_func tree;\r\n    \r\n    closeScope ();\r\n\r\n    (****** end of seman ******)"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 11, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":327,"character":25},"end":{"line":327,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 15, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":23,"character":23},"end":{"line":23,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 16, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 19, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":43,"character":17},"end":{"line":43,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":1},"end":{"line":47,"character":1}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":45,"character":26},"end":{"line":45,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":46,"character":37},"end":{"line":46,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":2},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 24, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":3},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    m\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0400543212891ms
Sending response {"id": 27, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":5},"end":{"line":47,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":4},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mu\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 29, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":5},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mut\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 30, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":7},"end":{"line":47,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 31, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":6},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 33, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":11},"end":{"line":47,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":7},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 35, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":8},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable s\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":13},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 37, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":9},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable sy\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 38, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":10},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable syn\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 41, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":15},"end":{"line":47,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":11},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synt\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0169277191162ms
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":12},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":17},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00214576721191ms
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 45, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":17},"end":{"line":47,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0121593475342ms
Sending response {"id": 47, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":13},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":18},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 49, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":18},"end":{"line":47,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":14},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_f\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":19},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 52, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":15},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_fa\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":20},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 53, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":16},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_fat\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":17},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_fath\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":22},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":18},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_fathe\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":23},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00214576721191ms
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":19},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":24},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 58, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":24},"end":{"line":47,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":20},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 61, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 62, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":21},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father :\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 63, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":26},"end":{"line":47,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":22},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 66, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":23},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : f\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":28},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0131130218506ms
Sending response {"id": 68, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":24},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : fu\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":25},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : fun\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 69, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":30},"end":{"line":47,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 71, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":26},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 72, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":31},"end":{"line":47,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 74, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":27},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 75, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":32},"end":{"line":47,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 77, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":27},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":27}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":5,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":1,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":1,"character":11},"end":{"line":1,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 80, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":9,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 81, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":0,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":1,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 84, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":1,"character":11},"end":{"line":1,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":28},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 86, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":29},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\no\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":2,"character":1},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00214576721191ms
Sending response {"id": 88, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":30},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nop\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 89, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":31},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopn\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 91, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":3},"end":{"line":2,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 93, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":33},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nope\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":34},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 94, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 95, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 96, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":35},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen \r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 97, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 98, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 99, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 100, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 101, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":23,"character":23},"end":{"line":23,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":35},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen \r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 106, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":36},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen L\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":2,"character":6},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":37},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen LL\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 108, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 110, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":39},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen LLvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 111, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 116, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":23,"character":23},"end":{"line":23,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":39},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen LLvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 120, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":42},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen L\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 122, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":43},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Ll\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":2,"character":7},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 125, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 126, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":44},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llv\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 129, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 130, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":45},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 131, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 132, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 134, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 135, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 136, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":23,"character":23},"end":{"line":23,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":45},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 139, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 140, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":45},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":45}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":59,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 142, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":59,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":48,"character":32},"end":{"line":48,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":46},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n    \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 145, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":47},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n    m\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":49,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 147, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 148, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":49,"character":5},"end":{"line":49,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":48},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n    mu\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 150, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":51},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n    mutab\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 151, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":49,"character":9},"end":{"line":49,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0128746032715ms
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":54},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n    mutable \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 153, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 154, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":55},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n    mutable }\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 155, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":56},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n    mutable \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 157, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":57},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n    mutable f\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":49,"character":13},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":59},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n    mutable fra\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 160, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":49,"character":15},"end":{"line":49,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 162, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":62},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n    mutable \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 163, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":77},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen LLvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 164, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":81},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen \r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 167, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":82},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 168, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":4},"end":{"line":2,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 169, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":84},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nop\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 170, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":2},"end":{"line":2,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 171, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":85},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopn\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 172, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":3},"end":{"line":2,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 173, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":89},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father : func;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 174, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":1,"character":11},"end":{"line":1,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":95},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father :\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 176, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":26},"end":{"line":47,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 177, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 178, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":97},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable synta_father\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 179, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":24},"end":{"line":47,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":110},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":111},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mut\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":115},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 181, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":46,"character":37},"end":{"line":46,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 182, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":115},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":115}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 185, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 186, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":23,"character":23},"end":{"line":23,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 188, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 190, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":46,"character":37},"end":{"line":46,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 193, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0159740447998ms
Sending response {"id": 194, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":23,"character":23},"end":{"line":23,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":57,"character":65}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 196, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":57,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":50,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 199, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 201, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":46,"character":37},"end":{"line":46,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 202, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":119},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mut\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 203, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":7},"end":{"line":47,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 204, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":120},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 206, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":11},"end":{"line":47,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 207, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":121},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 209, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0162124633789ms
Sending response {"id": 210, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":122},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable f\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":13},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 211, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":124},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable fra\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 212, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":15},"end":{"line":47,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 213, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":125},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable fram\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 214, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":16},"end":{"line":47,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":126},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable frame\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":17},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 216, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 217, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":17},"end":{"line":47,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 219, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":127},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable frame \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 220, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":128},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable frame\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 222, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":17},"end":{"line":47,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 224, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":16}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":12},"end":{"line":47,"character":12}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":130},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable llframe\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 227, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 229, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":131},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 230, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":15},"end":{"line":47,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 231, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 232, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":47,"character":20}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":20},"end":{"line":47,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 234, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":132},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 235, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 236, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":133},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame :\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 237, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":47,"character":22},"end":{"line":47,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 238, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":134},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 240, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 241, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":0,"character":10}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0112056732178ms
Sending response {"id": 242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":10},"end":{"line":0,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 243, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":1,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 244, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":1,"character":11},"end":{"line":1,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":135},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 246, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0131130218506ms
Sending response {"id": 247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":136},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\ni\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":2,"character":1},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 248, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 249, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":1},"end":{"line":2,"character":1}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 250, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":137},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 252, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":138},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\no\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":2,"character":1},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00214576721191ms
Sending response {"id": 254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":141},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":142},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen \r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 255, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":256,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0181198120117ms
Sending response {"id": 256, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":143},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen L\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":257,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":2,"character":6},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 257, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":258,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 258, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":259,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 259, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":260,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 260, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":144},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen \r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":261,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 261, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":262,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0271797180176ms
Sending response {"id": 262, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":145},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen l\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":263,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":2,"character":6},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 263, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":146},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen ll\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":264,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 264, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":265,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 265, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":266,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 266, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":147},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen ll_\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":267,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 267, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":268,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":8},"end":{"line":2,"character":8}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":269,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 269, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":150},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen ll_fra\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":270,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 270, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":271,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":11},"end":{"line":2,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
Sending response {"id": 271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":272,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 272, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":152},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen ll_frame\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":273,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 273, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":274,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":13},"end":{"line":2,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":275,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 275, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":160},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen \r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":276,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 276, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":277,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00619888305664ms
Sending response {"id": 277, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":161},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen L\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":278,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":2,"character":6},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00214576721191ms
Sending response {"id": 278, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":279,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0112056732178ms
Sending response {"id": 279, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":280,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":6},"end":{"line":2,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Sending response {"id": 280, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":281,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0178813934326ms
Sending response {"id": 281, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":162},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Ll\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":282,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 282, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":283,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 283, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":284,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 284, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":164},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":285,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 285, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":286,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":2,"character":9},"end":{"line":2,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 286, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":287,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
Sending response {"id": 287, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":164},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : \r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":164}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":165},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : l\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":288,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":48,"character":24},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":166},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : ll\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":289,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 289, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":290,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":48,"character":25},"end":{"line":48,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 290, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":291,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 291, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":167},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : llv\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":292,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 292, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":293,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":48,"character":26},"end":{"line":48,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 293, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":294,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 294, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":168},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : ll\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":295,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0121593475342ms
Sending response {"id": 295, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":296,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":48,"character":25},"end":{"line":48,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 296, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":297,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 297, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":169},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : llt\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":298,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"position":{"line":48,"character":26},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 298, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":299,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 299, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":300,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":48,"character":26},"end":{"line":48,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 300, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":170},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : llty\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":301,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 301, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":302,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":48,"character":27},"end":{"line":48,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 302, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":303,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":172},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : lltype\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":304,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 304, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":305,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":48,"character":29},"end":{"line":48,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":306,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 306, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":173},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : lltype;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":307,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 307, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":308,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":48,"character":30},"end":{"line":48,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 308, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":309,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 309, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":173},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : lltype;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":173}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":310,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":311,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 311, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":312,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 312, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":313,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":48,"character":30},"end":{"line":48,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":178},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\nopen Llvm\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n    mutable ll_frame : ll\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":314,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 314, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":315,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":48,"character":25},"end":{"line":48,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 315, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":316,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 316, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":231},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","id":317,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 317, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":318,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"},"range":{"start":{"line":46,"character":37},"end":{"line":46,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 318, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":319,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":231},"contentChanges":[{"text":"open Types\r\nopen Symbol\r\n\r\ntype id = string\r\n\r\n(* type reference = Is_ref | Not_ref *)\r\n\r\n(*type pass_way = PASS_BY_REFERENCE | PASS_BY_VALUE*)\r\n\r\ntype sign = SPlus | SMinus\r\n\r\ntype op = \r\n| Plus\r\n| Minus\r\n| Mult\r\n| Div\r\n| Mod\r\n\r\ntype compare_op =\r\n| Eq\r\n| Neq\r\n| Less\r\n| Great\r\n| LessEq\r\n| GreatEq\r\n\r\ntype logic_op = \r\n| And\r\n| Or\r\n\r\n(*\r\ntype data_type =\r\n| Int\r\n| Byte\r\n\r\ntype _type = \r\n| Basic of data_type\r\n| Array of data_type\r\n*)\r\n\r\ntype func = {\r\n    func_id : id;\r\n    func_pars : par list;\r\n    func_ret_type : typ;\r\n    func_local : local list;\r\n    func_stmt : stmt list;\r\n    mutable func_nesting_scope : int;\r\n}\r\n\r\nand par = {\r\n    par_id : id;\r\n    par_pass_way : pass_mode;\r\n    par_type : typ;\r\n}\r\n\r\nand local = \r\n| Local_func of func\r\n| Local_var of var\r\n\r\nand var = {\r\n    var_id : id;\r\n    var_type : typ;\r\n}\r\n\r\nand stmt = \r\n| Null_stmt\r\n| S_assign of l_value * expr\r\n| S_comp of stmt list\r\n| S_call of func_call\r\n| S_if of cond * stmt * (stmt option)\r\n| S_while of cond * stmt\r\n| S_return of expr option\r\n\r\nand func_call = {\r\n    call_id : id;\r\n    call_expr : expr list;\r\n    mutable return_type : typ option;\r\n}\r\n\r\nand raw_expr = \r\n| E_int of int\r\n| E_char of char\r\n| E_val of l_value\r\n| E_call of func_call\r\n| E_sign of sign * expr\r\n| E_op of expr * op * expr\r\n\r\nand expr = {\r\n    expr_raw : raw_expr;\r\n    mutable expr_type : typ option;\r\n}\r\n\r\nand raw_l_value = \r\n| L_exp of id * (expr option)\r\n| L_str of string\r\n\r\nand l_value = {\r\n    l_value_raw : raw_l_value;\r\n    mutable l_value_type : typ option;\r\n    mutable l_value_nesting_scope : int;\r\n}\r\n\r\nand cond = \r\n| C_true\r\n| C_false\r\n| C_not of cond\r\n| C_compare of expr * compare_op * expr\r\n| C_logic of cond * logic_op * cond\r\n\r\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml","version":231}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Ast.ml"}}}
Read message 
{"jsonrpc":"2.0","id":320,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 320, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":321,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 321, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":322,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 322, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":323,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 323, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":324,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 324, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":325,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00190734863281ms
Sending response {"id": 325, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":326,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":327,"character":25},"end":{"line":327,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 326, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":327,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":328,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 328, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":329,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 329, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":330,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 330, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":331,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 331, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":332,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 332, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":333,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":327,"character":25},"end":{"line":327,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 333, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":334,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 334, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":335,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 335, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":336,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 336, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":337,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":338,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 338, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":339,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 339, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":340,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":327,"character":25},"end":{"line":327,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 340, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":341,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 341, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":342,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00381469726562ms
Sending response {"id": 342, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":343,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 343, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":344,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 344, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":345,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 345, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":346,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0112056732178ms
Sending response {"id": 346, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":347,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":327,"character":25},"end":{"line":327,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":348,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 348, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":349,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 349, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":350,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 350, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":351,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 351, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":352,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":353,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 353, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":354,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":327,"character":25},"end":{"line":327,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 354, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":355,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 355, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":356,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0150203704834ms
Sending response {"id": 356, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":357,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 357, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":358,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 358, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":359,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 359, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":360,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 360, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":361,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"},"range":{"start":{"line":327,"character":25},"end":{"line":327,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 361, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Semantic.ml"}}}
Read message 
{"jsonrpc":"2.0","id":362,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 362, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":363,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 363, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":364,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 364, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":365,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":44,"character":48}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 365, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":366,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":44,"character":48}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 366, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":367,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":55,"character":47}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 367, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":368,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":53,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 368, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":369,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":29,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 369, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":370,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":29,"character":41},"end":{"line":29,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 370, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":371,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":29,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 371, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":372,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":29,"character":40},"end":{"line":29,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 372, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":373,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":30,"character":41},"end":{"line":30,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 373, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":374,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":42,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 374, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":375,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":42,"character":39},"end":{"line":42,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 375, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":376,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":42,"character":40},"end":{"line":42,"character":40}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 376, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":377,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":42,"character":42},"end":{"line":42,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 377, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":378,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":50,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.0112056732178ms
Sending response {"id": 378, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":379,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":44,"character":42}}}
[server] Got a method textDocument/hover
[server] processing took 0.00286102294922ms
Sending response {"id": 379, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":380,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":42,"character":35},"end":{"line":42,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 380, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":381,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":29,"character":38}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 381, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":382,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":29,"character":38}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 382, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":383,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":29,"character":33},"end":{"line":29,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 383, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":384,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":29,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 384, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":385,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":30,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 385, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":386,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":30,"character":32},"end":{"line":30,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 386, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":387,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":43,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 387, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":388,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":42,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00691413879395ms
Sending response {"id": 388, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":389,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":42,"character":35},"end":{"line":42,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 389, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":390,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":49,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0309944152832ms
Sending response {"id": 390, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":391,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 391, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":392,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":6},"end":{"line":47,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 392, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":393,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":30,"character":4},"end":{"line":47,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Sending response {"id": 393, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":2},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":394,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 394, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":395,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 395, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":3},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":396,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 396, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":397,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 397, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":4},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n        let pr_lltyp = give_lltype pr.par_type in\r\n        begin match par_lst with\r\n            | pr :: tl ->\r\n                begin match pr.pass_way with\r\n                    | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                    | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n                end\r\n            | [] -> []\r\n        end\r\n    in\r\n\r\n    let rec give_locvar_lltype_lst loc_lst =\r\n        begin match loc_lst with\r\n            | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n            | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n            | []                    -> []\r\n    in\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":398,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 398, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":399,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":46,"character":6},"end":{"line":46,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 399, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":400,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 400, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":401,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":41,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 401, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":402,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":41,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00286102294922ms
Sending response {"id": 402, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":403,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":41,"character":12},"end":{"line":41,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 403, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":404,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":41,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 404, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":405,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":43,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 405, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":406,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":45,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0112056732178ms
Sending response {"id": 406, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":407,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":46,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00286102294922ms
Sending response {"id": 407, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":408,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":46,"character":6},"end":{"line":46,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 408, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":409,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":41,"character":4},"end":{"line":46,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 409, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":5},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n        let pr_lltyp = give_lltype pr.par_type in\r\n        begin match par_lst with\r\n            | pr :: tl ->\r\n                begin match pr.pass_way with\r\n                    | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                    | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n                end\r\n            | [] -> []\r\n        end\r\n    in\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\nin\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":410,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 410, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":411,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":41,"character":0},"end":{"line":46,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 411, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":412,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 412, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":413,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":39,"character":6}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 413, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":414,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":39,"character":6},"end":{"line":39,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 414, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":415,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":30,"character":7},"end":{"line":39,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 415, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":416,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":29,"character":8},"end":{"line":39,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 416, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":417,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":31,"character":8},"end":{"line":39,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 417, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":418,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":30,"character":9},"end":{"line":39,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 418, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":419,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":30,"character":8},"end":{"line":39,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 419, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":420,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":41,"character":36}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 420, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":421,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":41,"character":36}}}
[server] Got a method textDocument/definition
[server] processing took 0.00691413879395ms
Sending response {"id": 421, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":6},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\nin\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\nin\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":422,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 422, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":423,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":30,"character":4},"end":{"line":39,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 423, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":424,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 424, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":425,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":41,"character":37}}}
[server] Got a method textDocument/definition
[server] processing took 0.00500679016113ms
Sending response {"id": 425, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":426,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":46,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 426, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":427,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":46,"character":2},"end":{"line":46,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 427, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":7},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\nin\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\nin\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":428,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 428, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":429,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 429, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":430,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":46,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 430, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":431,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":46,"character":2},"end":{"line":46,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 431, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":432,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":48,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 432, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":8},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\nin\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\ni\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":9},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\nin\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":433,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 433, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":10},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\nin\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":434,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 434, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":435,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":45,"character":37},"end":{"line":45,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 435, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":436,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 436, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":437,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":43,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 437, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":438,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":43,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 438, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":11},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\nin\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    \r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":439,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 439, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":440,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0138282775879ms
Sending response {"id": 440, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":12},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\nin\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    e\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":441,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":46,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 441, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":14},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\nin\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":442,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 442, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":443,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":46,"character":7},"end":{"line":46,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 443, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":444,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00619888305664ms
Sending response {"id": 444, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":445,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":41,"character":11}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 445, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":446,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":41,"character":11},"end":{"line":41,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 446, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":447,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":39,"character":2}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 447, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":448,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":38,"character":7},"end":{"line":39,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 448, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":15},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":449,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":38,"character":7},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00786781311035ms
Sending response {"id": 449, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":450,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 450, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":451,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":38,"character":7},"end":{"line":38,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 451, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":452,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 452, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":453,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":31,"character":28}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Sending response {"id": 453, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":454,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":31,"character":28},"end":{"line":31,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 454, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":15},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":15}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":455,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":49,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.00476837158203ms
Sending response {"id": 455, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":16},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":456,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 456, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":457,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 457, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":16},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\nlet rec codegen_func access_link func_ast =\r\n    \r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":16}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":17},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":458,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 458, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":459,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 459, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":18},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\nlet rec codegen_func access_link func_ast =\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":460,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 460, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":461,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":46,"character":43},"end":{"line":46,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 461, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":462,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 462, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":463,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":62,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 463, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":464,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":62,"character":35}}}
[server] Got a method textDocument/definition
[server] processing took 0.00905990600586ms
Sending response {"id": 464, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":465,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":66,"character":37}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 465, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":466,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":66,"character":37},"end":{"line":66,"character":37}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 466, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":467,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":66,"character":37}}}
[server] Got a method textDocument/definition
[server] processing took 0.00810623168945ms
Sending response {"id": 467, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":468,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":66,"character":37}}}
[server] Got a method textDocument/definition
[server] processing took 0.00882148742676ms
Sending response {"id": 468, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":19},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":469,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 469, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":470,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 470, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":19},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":19}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":471,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":45,"character":7}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 471, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":472,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":45,"character":7},"end":{"line":45,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Sending response {"id": 472, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":20},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n    \r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":473,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 473, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":474,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 474, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":21},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":475,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 475, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":476,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 476, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":22},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":477,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 477, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":478,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 478, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":23},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\n\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":479,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 479, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":480,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 480, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":24},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nl\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":481,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":1},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00405311584473ms
Sending response {"id": 481, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":25},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nle\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":27},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet \r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":482,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 482, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":483,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 483, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":28},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet r\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":484,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00214576721191ms
Sending response {"id": 484, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":485,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 485, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":486,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":5},"end":{"line":47,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 486, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":487,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 487, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":29},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet re\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":488,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 488, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":489,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":6},"end":{"line":47,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 489, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":490,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 490, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":30},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet rec\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":491,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 491, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":492,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":7},"end":{"line":47,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 492, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":493,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 493, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":31},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet re\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":33},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet \r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":494,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 494, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":495,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 495, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":34},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet g\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":496,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 496, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":497,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 497, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":498,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":5},"end":{"line":47,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 498, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":35},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet gi\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":499,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 499, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":500,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":6},"end":{"line":47,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 500, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":37},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":501,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 501, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":502,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":8},"end":{"line":47,"character":8}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 502, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":503,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 503, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":504,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":41,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 504, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":505,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":45,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 505, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":506,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":45,"character":4}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0100135803223ms
Sending response {"id": 506, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":507,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":45,"character":4},"end":{"line":45,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 507, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":508,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 508, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":509,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":8},"end":{"line":47,"character":8}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 509, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":38},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":510,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":9},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 510, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":511,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 511, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":512,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":9},"end":{"line":47,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 512, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":513,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 513, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":514,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":57,"character":99}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 514, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":515,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":9}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 515, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":516,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":9},"end":{"line":47,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 516, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":39},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_f\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":517,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":10},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 517, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":41},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_fra\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":42},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_fram\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":518,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":13},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 518, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":43},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":519,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":14},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 519, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":520,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 520, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":521,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":14},"end":{"line":47,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 521, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":522,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 522, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":44},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":523,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":15},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.0371932983398ms
Sending response {"id": 523, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":524,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 524, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":525,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":15},"end":{"line":47,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 525, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":526,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 526, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":45},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_t\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":527,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 527, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":46},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_ty\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":528,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":17},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 528, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":47},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_typ\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":529,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":18},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 529, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":48},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_type\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":530,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":19},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00214576721191ms
Sending response {"id": 530, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":49},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":531,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":20},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 531, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":532,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 532, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":533,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":20},"end":{"line":47,"character":20}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 533, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":534,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
Sending response {"id": 534, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":50},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":535,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 535, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":536,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 536, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":537,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":21},"end":{"line":47,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 537, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":51},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_a\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":538,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":22},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 538, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":52},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_ar\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":539,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":23},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 539, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":53},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":540,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":24},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00309944152832ms
Sending response {"id": 540, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":541,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 541, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":542,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":24},"end":{"line":47,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 542, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":54},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr \r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":543,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 543, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":544,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 544, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":545,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":63,"character":41}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 545, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":546,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":63,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 546, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":547,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":63,"character":41},"end":{"line":63,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 547, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":548,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":63,"character":41},"end":{"line":63,"character":61}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 548, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":549,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":62,"character":4},"end":{"line":63,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 549, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":550,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":63,"character":41},"end":{"line":63,"character":87}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 550, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":551,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":63,"character":41},"end":{"line":63,"character":108}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 551, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":552,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":63,"character":41},"end":{"line":63,"character":107}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 552, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":553,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":64,"character":55}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 553, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":554,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":52,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 554, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":555,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":51,"character":15}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 555, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":556,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":51,"character":8},"end":{"line":51,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 556, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":557,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":57,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0460147857666ms
Sending response {"id": 557, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":558,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":57,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 558, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":559,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":55,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 559, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":560,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":54,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 560, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":561,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":51,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 561, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":562,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":22}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00500679016113ms
Sending response {"id": 562, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":563,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":22},"end":{"line":47,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 563, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":564,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":49,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 564, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":55},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr a\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":565,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 565, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":566,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":26},"end":{"line":47,"character":26}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 566, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":57},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr acc\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":567,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 567, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":568,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":28},"end":{"line":47,"character":28}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 568, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":58},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr acce\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":60},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":569,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 569, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":570,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":31},"end":{"line":47,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Sending response {"id": 570, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":571,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 571, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":61},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":572,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 572, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":573,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":32},"end":{"line":47,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 573, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":574,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 574, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":62},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_l\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":64},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_lin\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":65},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":66},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link \r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":575,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 575, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":576,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 576, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":68},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fr\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":577,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 577, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":70},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":578,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 578, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":579,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":41},"end":{"line":47,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 579, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":580,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0109672546387ms
Sending response {"id": 580, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":71},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":581,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 581, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":582,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":42},"end":{"line":47,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 582, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":583,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 583, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":72},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_t\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":74},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_typ\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":75},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_type\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":584,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 584, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":585,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":46},"end":{"line":47,"character":46}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 585, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":586,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 586, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":76},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_type \r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":587,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 587, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":588,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 588, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":589,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":51,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 589, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":590,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":51,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0162124633789ms
Sending response {"id": 590, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":591,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":51,"character":8},"end":{"line":51,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0112056732178ms
Sending response {"id": 591, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":77},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_type par_lltype_lst\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":592,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 592, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":593,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":61},"end":{"line":47,"character":61}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 593, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":594,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 594, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":78},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_type par_lltype_lst \r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":595,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 595, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":596,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 596, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":597,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":54,"character":25}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 597, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":598,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":52,"character":19}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00405311584473ms
Sending response {"id": 598, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":599,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":52,"character":8},"end":{"line":52,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 599, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":79},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_type par_lltype_lst locvar_lltype_lst\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":600,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 600, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":601,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":79},"end":{"line":47,"character":79}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 601, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":602,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 602, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":603,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":57}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 603, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":604,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":57}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 604, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":605,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":57},"end":{"line":47,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 605, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":606,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":52},"end":{"line":47,"character":57}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 606, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":607,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":54},"end":{"line":47,"character":54}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 607, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":608,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":59,"character":67}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 608, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":609,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":53}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00381469726562ms
Sending response {"id": 609, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":610,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":53},"end":{"line":47,"character":53}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 610, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":81},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_type par_type_lst locvar_lltype_lst\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":611,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0209808349609ms
Sending response {"id": 611, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":612,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":51},"end":{"line":47,"character":51}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 612, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":613,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 613, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":614,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":70}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 614, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":615,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":69}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 615, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":616,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":70}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00286102294922ms
Sending response {"id": 616, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":617,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":70},"end":{"line":47,"character":70}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 617, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":618,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":69}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 618, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":619,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"position":{"line":47,"character":69}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 619, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":620,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":69},"end":{"line":47,"character":69}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 620, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":84},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_type par_type_lst locvar_ype_lst\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":621,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 621, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":622,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":67},"end":{"line":47,"character":67}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 622, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":623,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00786781311035ms
Sending response {"id": 623, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":85},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_type par_type_lst locvar_type_lst\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","id":624,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 624, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":625,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"},"range":{"start":{"line":47,"character":68},"end":{"line":47,"character":68}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 625, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":626,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0181198120117ms
Sending response {"id": 626, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":85},"contentChanges":[{"text":"open Llvm\r\nopen Ast\r\nopen Error\r\n\r\nexception Error of string\r\n\r\nlet context = global_context ()\r\nlet the_module = create_module context \"alan\"\r\nlet builder = builder context\r\n\r\nlet int_type = i16_type context (* lltype *)\r\nlet byte_type = i8_type context\r\nlet bool_type = i1_type context\r\nlet proc_type = void_type context\r\n\r\nlet rec give_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int                          -> int_type\r\n        | TYPE_byte                         -> byte_type\r\n        | TYPE_array (elem_type, arr_size)  -> array_type (give_lltype elem_type) arr_size (* element type can only be a basic data type in alan - int or byte *)\r\n    end\r\n\r\nlet rec give_fret_lltype alan_type =\r\n    begin match alan_type with\r\n        | TYPE_int  -> int_type\r\n        | TYPE_byte -> byte_type\r\n        | TYPE_proc -> proc_type\r\n    end\r\n\r\nlet rec give_par_lltype_lst par_lst =\r\n    let pr_lltyp = give_lltype pr.par_type in\r\n    begin match par_lst with\r\n        | pr :: tl ->\r\n            begin match pr.pass_way with\r\n                | PASS_BY_VALUE     -> pr_lltyp :: (give_par_lltype_lst tl)\r\n                | PASS_BY_REFERENCE -> (pointer_type pr_lltyp) :: (give_par_lltype_lst tl)\r\n            end\r\n        | [] -> []\r\n    end\r\n\r\nlet rec give_locvar_lltype_lst loc_lst =\r\n    begin match loc_lst with\r\n        | (Local_var vr) :: tl  -> (give_lltype vr.var_type) :: (give_locvar_lltype_lst tl)\r\n        | (Local_func _) :: tl  -> give_locvar_lltype_lst tl\r\n        | []                    -> []\r\n    end\r\n\r\nlet give_frame_types_arr access_link fret_type par_type_lst locvar_type_lst\r\n\r\nlet rec codegen_func access_link func_ast =\r\n\r\n    let par_lltype_lst = give_par_lltype_lst func_ast.func_pars in (* List of parameter lltypes *)\r\n    let locvar_lltype_lst = give_locvar_lltype_lst func_ast.func_local in (* List of local-variable lltyppes (without local funcs) *)\r\n    \r\n    let par_llarr = Array.of_list par_lltype_lst in (* Arrays of the above *)\r\n    let locvar_llarr = Array.of_list locvar_lltype_lst in\r\n    \r\n    let fret_lltype = give_fret_lltype func_ast.func_ret_type in (* LLtype of function's return value *)\r\n\r\n    let ll_func_type = function_type par_llarr fret_lltype in (*Function lltype *)\r\n    let ll_func = define_function func_ast.func_id ll_func_type the_module in (* Function llvalue *)\r\n\r\n    \r\n    let arr_of_lltypes = Array.of_list ( access_link :: fret_lltype :: (par_lltype_lst @ locvar_lltype_lst) ) in (* Array of lltypes for frame lltype *)\r\n    let ll_frame_type = struct_type context arr_of_lltypes in (* Frame lltype (llvm-struct type) *)\r\n\r\n    (* TO DO: LOCAL FUNCTION DEFINITION *)\r\n    (* *** *)\r\n\r\n    (* Basic block *)\r\n    let f_bb = entry_block ll_func in\r\n    position_at_end f_bb builder;\r\n\r\n    List.iter (codegen_stmt ll_frame) func_ast.func_stmt ;\r\n\r\nand rec codegen_par par_ast =\r\n\r\nand rec codegen_local local_ast = \r\n\r\nand rec codegen_func_call access_link func_call_ast =\r\n    (* CREATION OF THIS FUNCTION'S ACTIVATION FRAME *)\r\n    (* MUST ADD FUNCTION'S TYPE OF FRAME TO ASTT *)\r\n\r\nand rec codegen_stmt ll_frame stmt_ast =\r\n    begin match stmt_ast with\r\n        | Null_stmt                 ->\r\n            ()\r\n\r\n        | S_assign (lval,er)        ->\r\n\r\n        | S_comp st_lst             ->\r\n            List.iter (codegen_stmt ll_frame) st_lst\r\n\r\n        | S_call fcall              ->\r\n        | S_if (cnd, st, st_option) ->\r\n            let cond_val = codegen_cond cnd in\r\n\r\n            (* Grab the first block so that we might later add the conditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let then_bb = append_block context \"then\" the_function in\r\n            let merge_bb = append_block context \"ifcont\" the_function in\r\n\r\n            position_at_end then_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_then_bb = insertion_block builder in (* Codegen of 'then' can change the current block *)\r\n\r\n            (* Set an unconditional branch at the end of the then-block to the merge-block *)\r\n            position_at_end new_then_bb builder; ignore (build_br merge_bb builder);\r\n\r\n            begin match st_option with\r\n                | Some st_some ->\r\n                    let else_bb = append_block context \"else\" the_function in\r\n\r\n                    position_at_end else_bb builder;\r\n                    ignore (codegen_stmt st_some);\r\n                    let new_else_bb = insertion_block builder in\r\n\r\n                    (* Set an unconditional branch at the end of the else-block to the merge-block*)\r\n                    position_at_end new_else_bb builder; \r\n                    ignore (build_br merge_bb builder);\r\n                    \r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb else_bb builder);\r\n\r\n                | None ->\r\n                    (* Return to the end of the start-block to add the conditional branch *)\r\n                    position_at_end start_bb builder;\r\n                    ignore (build_cond_br cond_val then_bb merge_bb builder);\r\n\r\n            end\r\n            (* Finally, set the builder to the end of the merge-block *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_while (cnd, st)          ->\r\n            (* Grab the first block so that we later add the unconditional branch\r\n            * to it at the end of the function. *)\r\n            let start_bb = insertion_block builder in\r\n            let the_function = block_parent start_bb in\r\n\r\n            let while_bb = append_block context \"while\" the_function in\r\n            let do_bb = append_block context \"do\" the_function in\r\n            let merge_bb = append_block context \"continue\" the_function in\r\n\r\n            (* Set an unconditional branch at the end of the 'start' block to the start of the while-block *)\r\n            position_at_end start_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            position_at_end while_bb builder;  \r\n            let cond_val = codegen_cond cnd in\r\n            let new_while_bb = insertion_block builder in (* Codegen of 'while' can change the current block *)\r\n            (* Add the conditional branch to either the do-block or the merge-block*)\r\n            position_at_end new_while_bb builder;\r\n            ignore (build_cond_br cond_val do_bb merge_bb builder);      \r\n\r\n            position_at_end do_bb builder;\r\n            ignore (codegen_stmt st);\r\n            let new_do_bb = insertion_block builder in (* Codegen of 'do' can change the current block *)\r\n            (* Set an unconditional branch to the start of the while-block *)\r\n            position_at_end new_do_bb builder; \r\n            ignore (build_br while_bb builder);\r\n\r\n            (* Finally, set the builder to the end of the merge-block. *)\r\n            position_at_end merge_bb builder\r\n\r\n        | S_return None             ->\r\n        | S_return (Some er)        ->\r\n\r\n(* TO CHECK THIS *)\r\nand rec codegen_expr expr_ast = \r\n    begin match expr_ast.expr_raw with\r\n        | E_int n                   -> const_int int_type n\r\n        | E_char c                  -> const_int byte_type c\r\n        | E_val v                   -> codegen_lval v\r\n        | E_call cl                 -> codegen_call cl\r\n        | E_sign (SPlus,er)         -> codegen_expr er\r\n        | E_sign (SMinus,er)        -> build_neg (codegen_expr er) \"neg\" builder\r\n        | E_op (er1, er_op, er2)    ->\r\n            let ller1 = codegen_expr er1 in\r\n            let ller2 = codegen_expr er2 in\r\n            begin match er_op with\r\n                | Plus  -> build_add ller1 ller2 \"add\" builder\r\n                | Minus -> build_sub ller1 ller2 \"sub\" builder\r\n                | Mult  -> build_mul ller1 ller2 \"mul\" builder\r\n                | Div   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_sdiv ller1 ller2 \"sdiv\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_udiv ller1 ller2 \"udiv\" builder\r\n                    end\r\n                | Mod   -> \r\n                    begin match (er1.expr_type, er2.expr_type) with \r\n                        | (TYPE_int, TYPE_int)   -> build_srem ller1 ller2 \"smod\" builder\r\n                        | (TYPE_byte, TYPE_byte) -> build_urem ller1 ller2 \"umod\" builder\r\n                    end\r\n            end \r\n    end\r\n\r\n(* TO COMPLETE THIS *)\r\nand rec codegen_lval l_value_ast current_frame =\r\n    let find_var id nest_scope = \r\n\r\n    in\r\n    (*let find_arr_el id *)\r\n    begin match l_value_ast.l_value_raw with\r\n        (*to do*)\r\n        | L_exp (lval_id,None)      -> find_var lval_id (l_value_ast.l_value_nesting_scope)\r\n        | L_exp (lval_id,Some expr) -> find_arr_el lval_id (get_offset expr) (l_value_ast.l_value_nesting_scope)\r\n        | L_str str                 -> do_str str\r\n    end\r\n\r\n(* TO FIX THIS *)\r\nand rec codegen_cond cond_ast =\r\n    let give_ll_cmp_op alan_op is_signed =\r\n        begin match is_signed, alan_op with\r\n            | _, Eq -> Icmp.Eq\r\n            | _, Neq -> Icmp.Ne\r\n\r\n            | true, Less -> Icmp.Slt\r\n            | true, Great -> Icmp.Sgt\r\n            | true, LessEq -> Icmp.Sle\r\n            | true, GreatEq -> Icmp.Sge\r\n\r\n            | false, Less -> Icmp.Ult\r\n            | false, Great -> Icmp.Ugt\r\n            | false, LessEq -> Icmp.Ule\r\n            | false, GreatEq -> Icmp.Uge\r\n        end\r\n    in\r\n    let is_expr_signed er =\r\n        begin match er.expr_type with\r\n            | Some TYPE_int     -> true\r\n            | Some TYPE_byte    -> false\r\n        end\r\n    in\r\n    begin match cond_ast with\r\n        | C_true    -> const_int bool_type 1\r\n        | C_false   -> const_int bool_type 0\r\n        | C_not cnd -> build_not (codegen_cond cnd) \"not\" builder\r\n        | C_compare (er1, cmp_op, er2) -> \r\n            build_icmp (give_ll_cmp_op cmp_op (is_expr_signed er1)) (codegen_expr er1) (codegen_expr er2) \"icmp\" builder\r\n        | C_logic (cnd1, lg_op, cnd2) ->\r\n            begin match lg_op with\r\n                | And ->\r\n                    build_and (codegen_cond cnd1) (codegen_cond cnd2) \"and\" builder\r\n                | Or ->\r\n                    build_or (codegen_cond cnd1) (codegen_cond cnd2) \"or\" builder\r\n            end\r\n    end"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/vlassis/Desktop/Compiler/workspace/Codegen.ml","version":85}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":627,"method":"shutdown","params":null}
Sending response {"id": 627, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"exit","params":null}
Got exit! Terminating loop
Finished
